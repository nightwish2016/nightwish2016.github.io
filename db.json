{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1534731648484},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1534731648501},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1534731648751},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1534731648497},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1534731648488},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1534731648506},{"_id":"source/_posts/Python爬虫.md","hash":"153a2cb1d55c6a0feebd487167709e51e9a4b621","modified":1597495551253},{"_id":"source/_posts/RabbitMQ-No-Exchange-二-1.md","hash":"94670b51d4e16ea9eb7442e5dec4d1c323a4f2dd","modified":1535513704101},{"_id":"source/_posts/RabbitMQ.md","hash":"6d1ad36e9c9675553865c6fd08ca1b2ee2381c2c","modified":1535511793344},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1534731599279},{"_id":"source/_posts/testImage.md","hash":"ee7cb824fef4a727f1308e932404017d96d47d3a","modified":1535521283607},{"_id":"source/images/DirectSend.png","hash":"d163b87c8e0f067d77d76da77766c8da16750f5e","modified":1535512644982},{"_id":"source/images/DirctExchange.png","hash":"596d0664cf511547b82047b8cd379494c5fee8a1","modified":1535512814823},{"_id":"source/images/DirctReceive.png","hash":"5e31890c0735597fd87b9474d11b94ccd19a16d5","modified":1535512699674},{"_id":"source/images/error.png","hash":"41bbf94ddd0e8ea35c4e68877a299304c959097a","modified":1535513055844},{"_id":"source/images/NoExchangeQueue.png","hash":"bfc7eff5a934a63ed78a277f74d53d756f0c38e7","modified":1535511769588},{"_id":"source/images/pasted-0.png","hash":"9e76ac47d3eef5faf80ad207e15493134a35c928","modified":1535509874648},{"_id":"source/_drafts/RabbitMQ-No-Exchange-二.md","hash":"29eea5d170f78ee7e47e0980ef9de397380f4e5c","modified":1535512058380},{"_id":"source/images/pasted-2.png","hash":"bfc7eff5a934a63ed78a277f74d53d756f0c38e7","modified":1535511726327},{"_id":"source/images/image.png","hash":"f0e814c6ef6966e0cbbc05e2ce1b016e0a5c6e5e","modified":1535512850642},{"_id":"source/images/pasted-1.png","hash":"397830f6916fd16dcd0a33e70eeec0e6902edb0a","modified":1535509906611},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1534731648514},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1534731648518},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1534731648523},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1534731648538},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1534731648533},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1534731648528},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1534731648758},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1534731648560},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1534731648553},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1534731648543},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1534731648548},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1534731648569},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1534731648565},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1534731648733},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1534731648719},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534731648743},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1534731648727},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534731648738},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1534731648747},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1534731648723},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1534731648590},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1534731648594},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1534731648617},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1534731648603},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1534731648629},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1534731648646},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1534731648623},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1534731648581},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1534731648684},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1534731648634},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1534731648709},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1534731648697},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1534731648640},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1534731648691},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1534731648775},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1534731648715},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1534731649024},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1534731648705},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1534731649008},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1534731649054},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1534731649071},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1534731649049},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1534731648899},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1534731649081},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1534731649035},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1534731649198},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1534731649216},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1534731649270},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1534731649246},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1534731648660},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1534731648653},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1534731648665},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1534731648675},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1534731648670},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1534731648802},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1534731648679},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1534731648784},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1534731648817},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1534731648855},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1534731648794},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1534731648837},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1534731648849},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1534731648873},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1534731648861},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1534731648887},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1534731648867},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1534731648880},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1534731648908},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1534731649096},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1534731648981},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1534731649113},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1534731649165},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1534731649100},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1534731648924},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1534731648974},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1534731649177},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1534731649144},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1534731648997},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1534731648951},{"_id":"source/_discarded/testImage.md","hash":"72d557d1d0b772254e8ec32a8a89fa7166931a2c","modified":1597495551238},{"_id":"source/_discarded/testImages2-1.md","hash":"8451ae801062cd7d2aedb5bd1f7dc56c24fa172f","modified":1597495551239},{"_id":"source/_discarded/testImages2-2.md","hash":"06a2e3c1f34783cd3b53bf15303d6f3b17d2cea5","modified":1597495551241},{"_id":"source/_discarded/testImages2.md","hash":"fc8dc202dc151804f9bc3d8e1a004a7edde9ed07","modified":1597495551243},{"_id":"source/_discarded/testImagesa-1.md","hash":"862014c4d21e478a693496cb5600299be5d242ca","modified":1597495551244},{"_id":"source/_discarded/testImagesa.md","hash":"ff380843a330ae0eeb614be9d2c30559fea18860","modified":1597495551245},{"_id":"source/images/pasted-5.png","hash":"09115df1a204c95cfa6436c147a27d8bf5bd7d9a","modified":1535517992484},{"_id":"source/images/pasted-3.png","hash":"2fe6c27f33e5946e09b55eab6be80516c6939793","modified":1535517821798},{"_id":"source/images/pasted-4.png","hash":"2fe6c27f33e5946e09b55eab6be80516c6939793","modified":1535517847549},{"_id":"source/_drafts/testImage.md","hash":"ee7cb824fef4a727f1308e932404017d96d47d3a","modified":1535521284672},{"_id":"source/_posts/testImage/image.png","hash":"0bdb9ac4253c7bb22867cf0b33a8f38d26375651","modified":1535520969126},{"_id":"source/_drafts/testImage/image.png","hash":"0bdb9ac4253c7bb22867cf0b33a8f38d26375651","modified":1535521284700},{"_id":"source/_posts/estImage.md","hash":"ee7cb824fef4a727f1308e932404017d96d47d3a","modified":1535521295848},{"_id":"source/_posts/stImage.md","hash":"12475a98373a7b31d48b3c06cac7d5e9b93e00ab","modified":1535521305413},{"_id":"source/_posts/tImage.md","hash":"12475a98373a7b31d48b3c06cac7d5e9b93e00ab","modified":1535521310027},{"_id":"source/_posts/Image.md","hash":"12475a98373a7b31d48b3c06cac7d5e9b93e00ab","modified":1535521310229},{"_id":"source/CNAME","hash":"be8f6276f8b14234b6d8ebced45acbd4b8eeb63d","modified":1597495551205},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1597495551543},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1597495551545},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1597495551546},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1597495551554},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1597495551555},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1597495551556},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1597495551558},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1597495551560},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1597495551562},{"_id":"themes/next/README.en.md","hash":"fd7a00ae9026fb4f87dd7eed9ce049d0db447140","modified":1597495551565},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1597495551563},{"_id":"themes/next/_config.yml","hash":"e78f4c8c42b859c9a03a4948847e625f3751c162","modified":1597495551568},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1597495551566},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1597495551570},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1597495551571},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1597495551742},{"_id":"source/_posts/GitCommand.md","hash":"92f0e72eab7485d5884f2ff3117fcd3791ed8d50","modified":1597495551251},{"_id":"source/_posts/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6.md","hash":"fc4e16f7e41e0254fb5b0ea89ec064c7c9e72575","modified":1597495551255},{"_id":"source/_posts/RabbitMQ-ExchangeType-Fanout-3.md","hash":"e33579e5b376d9b43f1188e84ce9d909b1c8db24","modified":1597495551264},{"_id":"source/_posts/RabbitMQ-ExchangeType-Topic-4.md","hash":"fbbd7f2100e6363ad42c75f9b37f3ee7026fca0b","modified":1597495551278},{"_id":"source/_posts/RabbitMQ-No-Exchange-1.md","hash":"b5b2a0f053cdc3d6571ddbd60a91220752e7ff3d","modified":1597495551289},{"_id":"source/_posts/RabbitMQ-Task-distribution.md","hash":"2f0dbe2d44fb19b0f38f1b9689ca43c50da81837","modified":1597495551299},{"_id":"source/_posts/RabbitMQ-message-persistent.md","hash":"5c4e6731c23510e130a011fe61910491c50d9736","modified":1597495551315},{"_id":"source/_posts/abbitMQ-ExchangeType-Direct.md","hash":"9611069f6d25cda62a269d48713d0ee4999a1cdf","modified":1597495551336},{"_id":"source/_posts/test.md","hash":"bc83abb5c25fca2536ad0493bd734221fef6f7d5","modified":1597495551350},{"_id":"source/_discarded/1.md","hash":"5417472db294e3bae54c0a8b9108aadc6026ea73","modified":1597495551211},{"_id":"source/_discarded/Image.md","hash":"8571da8e4266d1b884811f2145c8e554511991b1","modified":1597495551213},{"_id":"source/_discarded/RabbitMQ-No-Exchange-二-1.md","hash":"acf657dc7da22089794b6c4acc47b156fb0236fe","modified":1597495551217},{"_id":"source/_discarded/RabbitMQ-No-Exchange-二.md","hash":"b1b04c229e8a4adf4928a1d0701fb03ae5e1b0eb","modified":1597495551219},{"_id":"source/_discarded/RabbitMQ.md","hash":"b8623e358994522f5043be4a9981c70274f38c51","modified":1597495551221},{"_id":"source/_discarded/aaa.md","hash":"f7c6e8ee68b137dfbb1fbcae9e6b0d4b29e9bc3d","modified":1597495551223},{"_id":"source/_discarded/est123.md","hash":"e3cd84446fb1ce1cf9c8eb235c8287ffa37831fb","modified":1597495551230},{"_id":"source/_discarded/g1.md","hash":"f41b1c2abdde0b0e3127f2df7e6904b63775d4da","modified":1597495551231},{"_id":"source/_discarded/hello-world.md","hash":"e32e8991b5f935eb6b794d4de02c396bfb3b2dae","modified":1597495551236},{"_id":"source/about/index.md","hash":"d28337542e04db5e6487476727ebf79132e6d671","modified":1597495551354},{"_id":"source/categories/index.md","hash":"93d5fca49d417456a9f4c7c7663507662bff3ac8","modified":1597495551357},{"_id":"source/tags/index.md","hash":"c2ffa6218777e6b443a187715a04240ab8fd47ce","modified":1597495551360},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1597495551548},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"3178cadcec94bfad651bdf320d83946b4e0ac932","modified":1597495551551},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"55091b1aab0b472d3f3e239c8d93306c751e4c1c","modified":1597495551552},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1597495551576},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1597495551574},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1597495551577},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1597495551578},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1597495551581},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1597495551582},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1597495551584},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1597495551585},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1597495551587},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1597495551589},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1597495551590},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1597495551593},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1597495551592},{"_id":"themes/next/layout/_layout.swig","hash":"b88585f9e1b7071f6670b20b77b656edd087ccc9","modified":1597495551601},{"_id":"themes/next/layout/archive.swig","hash":"c2be7c95af6205c7501a261f2fc9702c57107f89","modified":1597495551733},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1597495551735},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1597495551736},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1597495551737},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1597495551739},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1597495551740},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1597495551741},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1597495551745},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1597495551748},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1597495552236},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1597495552239},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1597495552240},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597495551969},{"_id":"source/_posts/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/command.png","hash":"7e884d735ff160c0b1eb71f25ade269bdc860c45","modified":1597495551257},{"_id":"source/_posts/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/queue.png","hash":"53dd97eb9e903be7957a778e73c02c56931ce834","modified":1597495551260},{"_id":"source/_posts/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/queue1.png","hash":"9c6db39e91e5e274245a9ef41f6a3b5c6512e3fe","modified":1597495551262},{"_id":"source/_posts/RabbitMQ-ExchangeType-Fanout-3/FanOutExchange.png","hash":"5df3c7352799cc614be3e33bc7214ae2f20e29d1","modified":1597495551268},{"_id":"source/_posts/RabbitMQ-ExchangeType-Fanout-3/Queue.png","hash":"71e08278863451214cecfecf8ba58a55b34070d9","modified":1597495551271},{"_id":"source/_posts/RabbitMQ-ExchangeType-Fanout-3/Receivecmd.png","hash":"f0635c5d053fe536f83edb5f34e1c79b449f7292","modified":1597495551274},{"_id":"source/_posts/RabbitMQ-ExchangeType-Fanout-3/Sendcmd.png","hash":"4d0273b8df7e509e54a4380961fd9b9e7fd897dc","modified":1597495551276},{"_id":"source/_posts/RabbitMQ-ExchangeType-Topic-4/RMQpng.png","hash":"a05d89f18f2a5529c21af5e59a62b0d3ef35ed68","modified":1597495551282},{"_id":"source/_posts/RabbitMQ-ExchangeType-Topic-4/Send.png","hash":"277f63850052c1df62e02c877f8ca078ed35087f","modified":1597495551284},{"_id":"source/_posts/RabbitMQ-ExchangeType-Topic-4/receive.png","hash":"d775084f4231e3cfe1e4fb064f698ad712103f63","modified":1597495551287},{"_id":"source/_posts/RabbitMQ-No-Exchange-1/NoExchangeQueue.png","hash":"bfc7eff5a934a63ed78a277f74d53d756f0c38e7","modified":1597495551292},{"_id":"source/_posts/RabbitMQ-No-Exchange-1/pasted-0.png","hash":"9e76ac47d3eef5faf80ad207e15493134a35c928","modified":1597495551296},{"_id":"source/_posts/RabbitMQ-No-Exchange-1/pasted-1.png","hash":"397830f6916fd16dcd0a33e70eeec0e6902edb0a","modified":1597495551298},{"_id":"source/_posts/RabbitMQ-message-persistent/Non-persistentMsg.png","hash":"f943311d1b5d794ac93c2fa98c6b9cca8b321877","modified":1597495551323},{"_id":"source/_posts/RabbitMQ-message-persistent/DurableExchange.png","hash":"62ec0d80703d1542b00bd3879010d9e86e13cef8","modified":1597495551318},{"_id":"source/_posts/RabbitMQ-message-persistent/QueueMsg.png","hash":"7134af9ecb4ab2cfd25397d2103985f12ea08700","modified":1597495551325},{"_id":"source/_posts/RabbitMQ-message-persistent/DurableQueue.png","hash":"9f377eafc0eae9cf14f5e2318275fd2c89e3f8a1","modified":1597495551320},{"_id":"source/_posts/RabbitMQ-message-persistent/StopSartRMQ.png","hash":"2c6faef6a3cb22f251e70d0550849419baacf156","modified":1597495551327},{"_id":"source/_posts/RabbitMQ-message-persistent/persistentMsg.png","hash":"6ac185e6240792a21d80b39e3d2566a6782cc58e","modified":1597495551332},{"_id":"source/_posts/RabbitMQ-message-persistent/msg.png","hash":"212551a22365b96082a901c8715fc91ea9dad3c2","modified":1597495551329},{"_id":"source/_posts/RabbitMQ-message-persistent/queue.png","hash":"51949f7fd2f6f809e064a2257ab0e0eed3899490","modified":1597495551334},{"_id":"source/_posts/RabbitMQ-Task-distribution/consumer1.png","hash":"2520a055c6eb4527005bbd7ff0eccc194d523bbe","modified":1597495551313},{"_id":"source/_posts/abbitMQ-ExchangeType-Direct/DirctExchange.png","hash":"596d0664cf511547b82047b8cd379494c5fee8a1","modified":1597495551340},{"_id":"source/_posts/abbitMQ-ExchangeType-Direct/DirctReceive.png","hash":"5e31890c0735597fd87b9474d11b94ccd19a16d5","modified":1597495551342},{"_id":"source/_posts/abbitMQ-ExchangeType-Direct/DirectSend.png","hash":"d163b87c8e0f067d77d76da77766c8da16750f5e","modified":1597495551343},{"_id":"source/_posts/abbitMQ-ExchangeType-Direct/error.png","hash":"41bbf94ddd0e8ea35c4e68877a299304c959097a","modified":1597495551346},{"_id":"source/_posts/abbitMQ-ExchangeType-Direct/image.png","hash":"f0e814c6ef6966e0cbbc05e2ce1b016e0a5c6e5e","modified":1597495551348},{"_id":"source/_discarded/aaa/image.png","hash":"f0e814c6ef6966e0cbbc05e2ce1b016e0a5c6e5e","modified":1597495551228},{"_id":"source/_discarded/g1/error.png","hash":"41bbf94ddd0e8ea35c4e68877a299304c959097a","modified":1597495551235},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1597495551597},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1597495551599},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1597495551605},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1597495551610},{"_id":"themes/next/layout/_macro/post.swig","hash":"b6b86a199f5a3692ec492123fe8cb53a8ca08169","modified":1597495551618},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5b1e91c2f6f88fbecd426cd0727e7b7854c6cc1d","modified":1597495551622},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f10ca698e8ea0c31ff72a6cffa832c3cd703a133","modified":1597495551624},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1597495551626},{"_id":"themes/next/layout/_partials/comments.swig","hash":"aa1e2134273b2756b4964cc806b62b0d0f8317e1","modified":1597495551629},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1597495551631},{"_id":"themes/next/layout/_partials/head.swig","hash":"476e6c2452732c2741f518004d336bc348e710d7","modified":1597495551632},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1597495551638},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1597495551640},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1597495551641},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1597495551643},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1597495551667},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1597495551669},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1597495551677},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1597495551711},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1597495551712},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1597495551715},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1597495551716},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1597495551718},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1597495551717},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1597495551751},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1597495551753},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1597495551754},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1597495551755},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1597495551757},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1597495551759},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1597495551758},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1597495551761},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1597495551762},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1597495551968},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1597495551972},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1597495551975},{"_id":"themes/next/source/images/avatar.jpg","hash":"c2e641c7c334d7b9c3bfc402ba8dfea4a4f9a7fc","modified":1597495551976},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1597495551978},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1597495551981},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1597495551982},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1597495551984},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1597495551985},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1597495551987},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1597495551988},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1597495551989},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1597495551992},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1597495551993},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1597495551995},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1597495551996},{"_id":"source/_posts/RabbitMQ-Task-distribution/Consumer1-1.png","hash":"1a1e96d619317b0250565ca6fb102ab83cebd68f","modified":1597495551303},{"_id":"source/_posts/RabbitMQ-Task-distribution/Consumer2-1.png","hash":"ed62ca3873f1181491dd429c1a7c43f2e88e9eb0","modified":1597495551307},{"_id":"source/_posts/RabbitMQ-Task-distribution/Consumer2.png","hash":"1f385838ddb335651fd9ef076bfabe1a08848479","modified":1597495551310},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597495551673},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597495551674},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597495551902},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597495551904},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597495551908},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597495551960},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597495551965},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1597495551634},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1597495551636},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1597495551647},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1597495551649},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1597495551653},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1597495551657},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1597495551660},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1597495551661},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1597495551665},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1597495551671},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1597495551672},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1597495551675},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1597495551679},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1597495551680},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1597495551682},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1597495551684},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1597495551688},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1597495551686},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1597495551688},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1597495551690},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1597495551692},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1597495551694},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1597495551695},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1597495551698},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1597495551700},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1597495551701},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"96e542bf52855c8b1124c730949f9e0936e754f0","modified":1597495551703},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1597495551704},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"8b6e5a61a8536938a58ef7bbfc2b80ddb81c580a","modified":1597495551706},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1597495551710},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1597495551708},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1597495551725},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1597495551727},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1597495551729},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1597495551731},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1597495551899},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"bf009e85212749405c27d89b49f401911355ecc7","modified":1597495551906},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1597495551901},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1597495551908},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"2a4e844dec690365774c2f6e8984706fee39ea63","modified":1597495551958},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1597495551959},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1597495551962},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a627633d3bb70b8501572b18037def478beb7017","modified":1597495551964},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1597495552001},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1597495552003},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"96c8b5fe1999de1b3a46730d9812787dfcd65884","modified":1597495552004},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1597495552006},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1597495552008},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1597495552009},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1597495552010},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1597495552012},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1597495552016},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1597495552018},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1597495552020},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1597495552047},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1597495552057},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1597495552061},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1597495552108},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1597495552109},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1597495552111},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1597495552113},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1597495552114},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1597495552150},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1597495552094},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1597495552098},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1597495552100},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1597495552096},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1597495552156},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1597495552158},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1597495552159},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1597495552161},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1597495552164},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1597495552163},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1597495552167},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1597495552169},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1597495552172},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1597495552171},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1597495552174},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1597495552176},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1597495552177},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1597495552178},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1597495552180},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1597495552182},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1597495552183},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1597495552185},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1597495552188},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1597495552189},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1597495552192},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1597495552194},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1597495552196},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1597495552220},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1597495552222},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1597495552231},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1597495552233},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1597495552235},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1597495552153},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1597495551722},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1597495551723},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1597495551769},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1597495551770},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1597495551772},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1597495551773},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1597495551774},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1597495551805},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1597495551850},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1597495551884},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"eec22651977ea25b5e65e8cb1b4906eef69ec588","modified":1597495551886},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1597495551889},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1597495551891},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1597495551897},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1597495551895},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1597495551912},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1597495551915},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1597495551917},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1597495551918},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1597495551921},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1597495551922},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1597495551923},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1597495551925},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1597495551946},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1597495551949},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1597495551950},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1597495551951},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1597495551953},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1597495551955},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1597495551932},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1597495551935},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1597495551937},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1597495551938},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1597495551940},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1597495552015},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1597495552036},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1597495552042},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1597495552065},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1597495552044},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1597495552067},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1597495552069},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1597495552070},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1597495552072},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1597495552074},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1597495552087},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1597495552090},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1597495552092},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1597495552119},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1597495552117},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1597495552122},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1597495552103},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1597495552105},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1597495552218},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1597495552216},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1597495551893},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1597495552039},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1597495552147},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1597495552145},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1597495552227},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1597495551776},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1597495551781},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1597495551779},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1597495551782},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1597495551784},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1597495551785},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1597495551789},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1597495551791},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1597495551792},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1597495551795},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1597495551797},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1597495551799},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1597495551801},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1597495551803},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1597495551806},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1597495551809},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1597495551811},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1597495551812},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1597495551814},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1597495551816},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1597495551818},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1597495551819},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f363a544aa800a2a5ed97c40887fe9743f67b03b","modified":1597495551820},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1597495551822},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1597495551824},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1597495551825},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1597495551826},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1597495551827},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"5f3510419161ec22ca88cce6a181ddad61de9e86","modified":1597495551834},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1597495551837},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1597495551838},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1597495551830},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1597495551840},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1597495551841},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"efc65bba7f2423439e9bca7d32ef7728c21e5c97","modified":1597495551832},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1597495551846},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1597495551845},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1597495551842},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1597495551847},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1597495551849},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1597495551853},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1597495551855},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1597495551857},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1597495551859},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1597495551860},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1597495551862},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1597495551863},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1597495551865},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1597495551865},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1597495551868},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1597495551870},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1597495551872},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1597495551874},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a434d29b9a9fc20518ab1bbc8bab824bed16f8a0","modified":1597495551875},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1597495551877},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1597495551879},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1597495551881},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"298bdab3b158f68fc22cb11fcf2c34931487d2ac","modified":1597495551882},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1597495551927},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1597495551929},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1597495551943},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1597495552029},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1597495552027},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1597495552031},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1597495552076},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1597495552078},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1597495552080},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1597495552082},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1597495552084},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1597495552086},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1597495552133},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1597495552142},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1597495552033},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1597495552127},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1597495552055},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1597495552211},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1597495552138},{"_id":"public/about/index.html","hash":"b1437a151a7dd3847a6f33b972bf8f01efc0c809","modified":1597500335358},{"_id":"public/tags/index.html","hash":"e281a621aa9e249216af3c38df4e546580022f4a","modified":1597500335359},{"_id":"public/categories/index.html","hash":"1d3a16c70a83d2efab3104c9e7227d0568d4902f","modified":1597500335359},{"_id":"public/archives/2020/index.html","hash":"2bb5bc29171e2b9722137e1b8fa15397e2fc836c","modified":1597500335359},{"_id":"public/archives/2020/07/index.html","hash":"27fa74b582108608d902089e291645e4614a193c","modified":1597500335359},{"_id":"public/categories/Git/index.html","hash":"1b481e4995f1b47d8033ec4ca2f159a090972714","modified":1597500335359},{"_id":"public/categories/爬虫/index.html","hash":"2629eae697e2dbf1eecff0c93f77b102cb193d03","modified":1597500335360},{"_id":"public/tags/Python/index.html","hash":"855c9be567ee327e3cec61aae02ee52264eaffe9","modified":1597500335360},{"_id":"public/2020/07/27/GitCommand/index.html","hash":"9bfff4b088873069e56884944554333f4c1d7c04","modified":1597500335361},{"_id":"public/2020/07/27/test/index.html","hash":"81ff4b7e01db82d42c94fcba5404f35cac053faa","modified":1597500335361},{"_id":"public/2018/09/10/RabbitMQ-Task-distribution/index.html","hash":"6bddc85e09f78f4f83d42916b2c9136b2b1f850d","modified":1597500335361},{"_id":"public/2018/09/07/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/index.html","hash":"0290114ebdd68b962db9b8a95eb3333c558b50e7","modified":1597500335362},{"_id":"public/2018/09/07/RabbitMQ-message-persistent/index.html","hash":"bec553b0efbf6d907520bc4d2f71042fa0fba652","modified":1597500335362},{"_id":"public/2018/09/05/RabbitMQ-ExchangeType-Topic-4/index.html","hash":"af7605a9450ed187fd15d6ff01d7d3032ec85d80","modified":1597500335362},{"_id":"public/2018/08/30/RabbitMQ-ExchangeType-Fanout-3/index.html","hash":"5b1aee20bc6b3c9b8dbd5602dc62555a7c865c85","modified":1597500335362},{"_id":"public/2018/08/29/abbitMQ-ExchangeType-Direct/index.html","hash":"6159120f6f87b2615630f978de6c55a41a3b4a42","modified":1597500335363},{"_id":"public/2018/08/29/RabbitMQ-No-Exchange-1/index.html","hash":"f929979235c67ce99d4504a8681b7f6a0764124f","modified":1597500335363},{"_id":"public/2018/08/20/Python爬虫/index.html","hash":"fef692db01ae59b9b900bf469e44cdbeed4990e9","modified":1597500335363},{"_id":"public/archives/index.html","hash":"4a85b79a98f8e1adb88a5ba2251fd53c823c1bbc","modified":1597500335363},{"_id":"public/archives/2018/index.html","hash":"1a5926cbb2d0eb646156754151b5eb138543cb83","modified":1597500335364},{"_id":"public/archives/2018/08/index.html","hash":"249d16adea5429da57c9b539efc28cd2eb17f68a","modified":1597500335364},{"_id":"public/archives/2018/09/index.html","hash":"537005234ea7c65556ea7e8b5d2421e4ea62dabd","modified":1597500335364},{"_id":"public/categories/RabbitMQ/index.html","hash":"71acaa56e595ae1bb6bf137420164a366168684e","modified":1597500335364},{"_id":"public/index.html","hash":"519a5d24509488c8f40722f0169d4158d9624ea4","modified":1597500335364},{"_id":"public/tags/RabbitMQ/index.html","hash":"7481734e90db27b3c7a1727988793f6d11b704b1","modified":1597500335365},{"_id":"public/tags/C/index.html","hash":"29c18c50b1a39b44564c594d289e03d28cfc4f66","modified":1597500335365},{"_id":"public/tags/爬虫/index.html","hash":"3bfb084a8303f3a92842ed45c3826c7349316016","modified":1597500335366}],"Category":[{"name":"Git","_id":"ckdvqa0tg0002tov45c9iwvm9"},{"name":"RabbitMQ","_id":"ckdvqa0tt0007tov4hwpd0msp"},{"name":"爬虫","_id":"ckdvqa1200016tov4yibl0cc7"}],"Data":[],"Page":[{"title":"tags","date":"2018-08-31T03:01:40.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-31 11:01:40\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-08-15T12:45:51.360Z","path":"tags/index.html","layout":"page","_id":"ckdvqa11r0014tov42aijb34r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","comments":0,"date":"2018-08-31T03:11:13.000Z","_content":"Email:kzhou2017@outlook.com\nWeChat:nightwish2010","source":"about/index.md","raw":"title: about\ncomments: false\ndate: 2018-08-31 11:11:13\n---\nEmail:kzhou2017@outlook.com\nWeChat:nightwish2010","updated":"2020-08-15T12:45:51.354Z","path":"about/index.html","layout":"page","_id":"ckdvqa11x0015tov4l6oqtys6","content":"<p>Email:<a href=\"mailto:kzhou2017@outlook.com\" target=\"_blank\" rel=\"noopener\">kzhou2017@outlook.com</a><br>WeChat:nightwish2010</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Email:<a href=\"mailto:kzhou2017@outlook.com\" target=\"_blank\" rel=\"noopener\">kzhou2017@outlook.com</a><br>WeChat:nightwish2010</p>\n"},{"title":"categories","date":"2018-09-05T04:33:58.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-05 12:33:58\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-08-15T12:45:51.357Z","path":"categories/index.html","layout":"page","_id":"ckdvqa1220018tov4g0oz88dw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Python爬虫","author":"Kevin Zhou","date":"2018-08-20T14:12:00.000Z","_content":"### 如何使用requests登录豆瓣并且爬取内容\nNote:\n1.如果登录之后要去其他页面查看相关内容得记录session\n```python\n   s=requests.session()\n  r = s.post(loginUrl, data=formData, headers=headers\n  res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)\n```\n2.r.history可以记录login之后的302 status\n<!--more-->\nCode:\n```python\n# -*- encoding:utf-8 -*-  \n##############################  \n__author__ = \"KevinZhou\"\n__date__ = \"2017/7/23\"\n###############################  \n\nimport requests\nfrom bs4 import BeautifulSoup\nimport urllib.request\nimport re\n\nloginUrl = 'https://accounts.douban.com/login'\nformData = {\n    \"redir\": \"http://movie.douban.com/mine\",\n    \"form_email\": \"******\",\n    \"form_password\": \"******\",\n    \"login\": u'登录',\n    \"source\":\"index_nav\"\n}\nheaders = {'user-agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}\n\nr = requests.post(loginUrl, data=formData, headers=headers)\npage = r.text\nprint (r.url)\n\n'''''获取验证码图片'''\n# 利用bs4获取captcha地址\nsoup = BeautifulSoup(page, \"html.parser\")\ncaptchaAddr = soup.find('img', id='captcha_image')['src']\n# 利用正则表达式获取captcha的ID\n# reCaptchaID = r'<input type=\"hidden\" name=\"captcha-id\" value=\"(.*?)\"/'\n# captchaID = re.findall(reCaptchaID, page)\n\n# htm=requests.get(\"https://accounts.douban.com/login\")\n#print(htm.content.decode('utf-8'))\na=soup.find(\"img\",class_=\"captcha_image\")\nprint(a.attrs['src'])\npattern = re.compile(r'id=(\\w*)(\\W)en&size=(\\w*)$')\nmatch=pattern.search(a.attrs['src'])\nif match:\n    captchaID=match.group()[3:][:-7]\n    print(captchaID)\n\n# print captchaID\n# 保存到本地\nurllib.request.urlretrieve(captchaAddr,\"captcha.jpg\")\ncaptcha = input('please input the captcha:')\n\nformData['captcha-solution'] = captcha\nformData['captcha-id'] = captchaID\ns=requests.session()\nr = s.post(loginUrl, data=formData, headers=headers)\n\npage = r.text\nprint(r.url)\nprint(r.history)\n# print(r.cookies)\n# print(r.content.decode('utf-8'))\n# res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)\n#print(res.content.decode('utf-8'))\nif r.url == 'https://movie.douban.com/mine':\n    print('Login successfully!!!')\nprint\n'我看过的电影', '-' * 60\n# 获取看过的电影\nsoup = BeautifulSoup(page, \"html.parser\")\nresult = soup.findAll('li')\nfor item in result:\n    s=item.find('a', class_=\"cover\")\n    if s is not None:\n        # print(s)\n        print(s.get(\"href\"))\n        print(s.img[\"alt\"])\n        # for img in  s:\n        #     print(img[\"alt\"])\n        #     print(img.alt)\n\nelse:\n    print\n\"failed!\"\n```","source":"_posts/Python爬虫.md","raw":"title: Python爬虫\nauthor: Kevin Zhou\ntags:\n  - Python\n  - 爬虫\ncategories:\n  - 爬虫\ndate: 2018-08-20 22:12:00\n---\n### 如何使用requests登录豆瓣并且爬取内容\nNote:\n1.如果登录之后要去其他页面查看相关内容得记录session\n```python\n   s=requests.session()\n  r = s.post(loginUrl, data=formData, headers=headers\n  res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)\n```\n2.r.history可以记录login之后的302 status\n<!--more-->\nCode:\n```python\n# -*- encoding:utf-8 -*-  \n##############################  \n__author__ = \"KevinZhou\"\n__date__ = \"2017/7/23\"\n###############################  \n\nimport requests\nfrom bs4 import BeautifulSoup\nimport urllib.request\nimport re\n\nloginUrl = 'https://accounts.douban.com/login'\nformData = {\n    \"redir\": \"http://movie.douban.com/mine\",\n    \"form_email\": \"******\",\n    \"form_password\": \"******\",\n    \"login\": u'登录',\n    \"source\":\"index_nav\"\n}\nheaders = {'user-agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}\n\nr = requests.post(loginUrl, data=formData, headers=headers)\npage = r.text\nprint (r.url)\n\n'''''获取验证码图片'''\n# 利用bs4获取captcha地址\nsoup = BeautifulSoup(page, \"html.parser\")\ncaptchaAddr = soup.find('img', id='captcha_image')['src']\n# 利用正则表达式获取captcha的ID\n# reCaptchaID = r'<input type=\"hidden\" name=\"captcha-id\" value=\"(.*?)\"/'\n# captchaID = re.findall(reCaptchaID, page)\n\n# htm=requests.get(\"https://accounts.douban.com/login\")\n#print(htm.content.decode('utf-8'))\na=soup.find(\"img\",class_=\"captcha_image\")\nprint(a.attrs['src'])\npattern = re.compile(r'id=(\\w*)(\\W)en&size=(\\w*)$')\nmatch=pattern.search(a.attrs['src'])\nif match:\n    captchaID=match.group()[3:][:-7]\n    print(captchaID)\n\n# print captchaID\n# 保存到本地\nurllib.request.urlretrieve(captchaAddr,\"captcha.jpg\")\ncaptcha = input('please input the captcha:')\n\nformData['captcha-solution'] = captcha\nformData['captcha-id'] = captchaID\ns=requests.session()\nr = s.post(loginUrl, data=formData, headers=headers)\n\npage = r.text\nprint(r.url)\nprint(r.history)\n# print(r.cookies)\n# print(r.content.decode('utf-8'))\n# res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)\n#print(res.content.decode('utf-8'))\nif r.url == 'https://movie.douban.com/mine':\n    print('Login successfully!!!')\nprint\n'我看过的电影', '-' * 60\n# 获取看过的电影\nsoup = BeautifulSoup(page, \"html.parser\")\nresult = soup.findAll('li')\nfor item in result:\n    s=item.find('a', class_=\"cover\")\n    if s is not None:\n        # print(s)\n        print(s.get(\"href\"))\n        print(s.img[\"alt\"])\n        # for img in  s:\n        #     print(img[\"alt\"])\n        #     print(img.alt)\n\nelse:\n    print\n\"failed!\"\n```","slug":"Python爬虫","published":1,"updated":"2020-08-15T12:45:51.253Z","_id":"cjlenmyfp0001z0okgawjas0b","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"如何使用requests登录豆瓣并且爬取内容\"><a href=\"#如何使用requests登录豆瓣并且爬取内容\" class=\"headerlink\" title=\"如何使用requests登录豆瓣并且爬取内容\"></a>如何使用requests登录豆瓣并且爬取内容</h3><p>Note:<br>1.如果登录之后要去其他页面查看相关内容得记录session<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> s=requests.session()</span><br><span class=\"line\">r = s.post(loginUrl, data=formData, headers=headers</span><br><span class=\"line\">res=s.get(<span class=\"string\">\"http://movie.douban.com/mine\"</span>,cookies=r.cookies,headers=headers)</span><br></pre></td></tr></table></figure></p>\n<p>2.r.history可以记录login之后的302 status<br><a id=\"more\"></a><br>Code:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- encoding:utf-8 -*-  </span></span><br><span class=\"line\"><span class=\"comment\">##############################  </span></span><br><span class=\"line\">__author__ = <span class=\"string\">\"KevinZhou\"</span></span><br><span class=\"line\">__date__ = <span class=\"string\">\"2017/7/23\"</span></span><br><span class=\"line\"><span class=\"comment\">###############################  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">loginUrl = <span class=\"string\">'https://accounts.douban.com/login'</span></span><br><span class=\"line\">formData = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"redir\"</span>: <span class=\"string\">\"http://movie.douban.com/mine\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"form_email\"</span>: <span class=\"string\">\"******\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"form_password\"</span>: <span class=\"string\">\"******\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"login\"</span>: <span class=\"string\">u'登录'</span>,</span><br><span class=\"line\">    <span class=\"string\">\"source\"</span>:<span class=\"string\">\"index_nav\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">headers = &#123;<span class=\"string\">'user-agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.post(loginUrl, data=formData, headers=headers)</span><br><span class=\"line\">page = r.text</span><br><span class=\"line\"><span class=\"keyword\">print</span> (r.url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''''获取验证码图片'''</span></span><br><span class=\"line\"><span class=\"comment\"># 利用bs4获取captcha地址</span></span><br><span class=\"line\">soup = BeautifulSoup(page, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">captchaAddr = soup.find(<span class=\"string\">'img'</span>, id=<span class=\"string\">'captcha_image'</span>)[<span class=\"string\">'src'</span>]</span><br><span class=\"line\"><span class=\"comment\"># 利用正则表达式获取captcha的ID</span></span><br><span class=\"line\"><span class=\"comment\"># reCaptchaID = r'&lt;input type=\"hidden\" name=\"captcha-id\" value=\"(.*?)\"/'</span></span><br><span class=\"line\"><span class=\"comment\"># captchaID = re.findall(reCaptchaID, page)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># htm=requests.get(\"https://accounts.douban.com/login\")</span></span><br><span class=\"line\"><span class=\"comment\">#print(htm.content.decode('utf-8'))</span></span><br><span class=\"line\">a=soup.find(<span class=\"string\">\"img\"</span>,class_=<span class=\"string\">\"captcha_image\"</span>)</span><br><span class=\"line\">print(a.attrs[<span class=\"string\">'src'</span>])</span><br><span class=\"line\">pattern = re.compile(<span class=\"string\">r'id=(\\w*)(\\W)en&amp;size=(\\w*)$'</span>)</span><br><span class=\"line\">match=pattern.search(a.attrs[<span class=\"string\">'src'</span>])</span><br><span class=\"line\"><span class=\"keyword\">if</span> match:</span><br><span class=\"line\">    captchaID=match.group()[<span class=\"number\">3</span>:][:<span class=\"number\">-7</span>]</span><br><span class=\"line\">    print(captchaID)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print captchaID</span></span><br><span class=\"line\"><span class=\"comment\"># 保存到本地</span></span><br><span class=\"line\">urllib.request.urlretrieve(captchaAddr,<span class=\"string\">\"captcha.jpg\"</span>)</span><br><span class=\"line\">captcha = input(<span class=\"string\">'please input the captcha:'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">formData[<span class=\"string\">'captcha-solution'</span>] = captcha</span><br><span class=\"line\">formData[<span class=\"string\">'captcha-id'</span>] = captchaID</span><br><span class=\"line\">s=requests.session()</span><br><span class=\"line\">r = s.post(loginUrl, data=formData, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">page = r.text</span><br><span class=\"line\">print(r.url)</span><br><span class=\"line\">print(r.history)</span><br><span class=\"line\"><span class=\"comment\"># print(r.cookies)</span></span><br><span class=\"line\"><span class=\"comment\"># print(r.content.decode('utf-8'))</span></span><br><span class=\"line\"><span class=\"comment\"># res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)</span></span><br><span class=\"line\"><span class=\"comment\">#print(res.content.decode('utf-8'))</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> r.url == <span class=\"string\">'https://movie.douban.com/mine'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Login successfully!!!'</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span></span><br><span class=\"line\"><span class=\"string\">'我看过的电影'</span>, <span class=\"string\">'-'</span> * <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"comment\"># 获取看过的电影</span></span><br><span class=\"line\">soup = BeautifulSoup(page, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">result = soup.findAll(<span class=\"string\">'li'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">    s=item.find(<span class=\"string\">'a'</span>, class_=<span class=\"string\">\"cover\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        <span class=\"comment\"># print(s)</span></span><br><span class=\"line\">        print(s.get(<span class=\"string\">\"href\"</span>))</span><br><span class=\"line\">        print(s.img[<span class=\"string\">\"alt\"</span>])</span><br><span class=\"line\">        <span class=\"comment\"># for img in  s:</span></span><br><span class=\"line\">        <span class=\"comment\">#     print(img[\"alt\"])</span></span><br><span class=\"line\">        <span class=\"comment\">#     print(img.alt)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span></span><br><span class=\"line\"><span class=\"string\">\"failed!\"</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"如何使用requests登录豆瓣并且爬取内容\"><a href=\"#如何使用requests登录豆瓣并且爬取内容\" class=\"headerlink\" title=\"如何使用requests登录豆瓣并且爬取内容\"></a>如何使用requests登录豆瓣并且爬取内容</h3><p>Note:<br>1.如果登录之后要去其他页面查看相关内容得记录session<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> s=requests.session()</span><br><span class=\"line\">r = s.post(loginUrl, data=formData, headers=headers</span><br><span class=\"line\">res=s.get(<span class=\"string\">\"http://movie.douban.com/mine\"</span>,cookies=r.cookies,headers=headers)</span><br></pre></td></tr></table></figure></p>\n<p>2.r.history可以记录login之后的302 status<br></p>","more":"<br>Code:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- encoding:utf-8 -*-  </span></span><br><span class=\"line\"><span class=\"comment\">##############################  </span></span><br><span class=\"line\">__author__ = <span class=\"string\">\"KevinZhou\"</span></span><br><span class=\"line\">__date__ = <span class=\"string\">\"2017/7/23\"</span></span><br><span class=\"line\"><span class=\"comment\">###############################  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">loginUrl = <span class=\"string\">'https://accounts.douban.com/login'</span></span><br><span class=\"line\">formData = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"redir\"</span>: <span class=\"string\">\"http://movie.douban.com/mine\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"form_email\"</span>: <span class=\"string\">\"******\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"form_password\"</span>: <span class=\"string\">\"******\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"login\"</span>: <span class=\"string\">u'登录'</span>,</span><br><span class=\"line\">    <span class=\"string\">\"source\"</span>:<span class=\"string\">\"index_nav\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">headers = &#123;<span class=\"string\">'user-agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.post(loginUrl, data=formData, headers=headers)</span><br><span class=\"line\">page = r.text</span><br><span class=\"line\"><span class=\"keyword\">print</span> (r.url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''''获取验证码图片'''</span></span><br><span class=\"line\"><span class=\"comment\"># 利用bs4获取captcha地址</span></span><br><span class=\"line\">soup = BeautifulSoup(page, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">captchaAddr = soup.find(<span class=\"string\">'img'</span>, id=<span class=\"string\">'captcha_image'</span>)[<span class=\"string\">'src'</span>]</span><br><span class=\"line\"><span class=\"comment\"># 利用正则表达式获取captcha的ID</span></span><br><span class=\"line\"><span class=\"comment\"># reCaptchaID = r'&lt;input type=\"hidden\" name=\"captcha-id\" value=\"(.*?)\"/'</span></span><br><span class=\"line\"><span class=\"comment\"># captchaID = re.findall(reCaptchaID, page)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># htm=requests.get(\"https://accounts.douban.com/login\")</span></span><br><span class=\"line\"><span class=\"comment\">#print(htm.content.decode('utf-8'))</span></span><br><span class=\"line\">a=soup.find(<span class=\"string\">\"img\"</span>,class_=<span class=\"string\">\"captcha_image\"</span>)</span><br><span class=\"line\">print(a.attrs[<span class=\"string\">'src'</span>])</span><br><span class=\"line\">pattern = re.compile(<span class=\"string\">r'id=(\\w*)(\\W)en&amp;size=(\\w*)$'</span>)</span><br><span class=\"line\">match=pattern.search(a.attrs[<span class=\"string\">'src'</span>])</span><br><span class=\"line\"><span class=\"keyword\">if</span> match:</span><br><span class=\"line\">    captchaID=match.group()[<span class=\"number\">3</span>:][:<span class=\"number\">-7</span>]</span><br><span class=\"line\">    print(captchaID)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print captchaID</span></span><br><span class=\"line\"><span class=\"comment\"># 保存到本地</span></span><br><span class=\"line\">urllib.request.urlretrieve(captchaAddr,<span class=\"string\">\"captcha.jpg\"</span>)</span><br><span class=\"line\">captcha = input(<span class=\"string\">'please input the captcha:'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">formData[<span class=\"string\">'captcha-solution'</span>] = captcha</span><br><span class=\"line\">formData[<span class=\"string\">'captcha-id'</span>] = captchaID</span><br><span class=\"line\">s=requests.session()</span><br><span class=\"line\">r = s.post(loginUrl, data=formData, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">page = r.text</span><br><span class=\"line\">print(r.url)</span><br><span class=\"line\">print(r.history)</span><br><span class=\"line\"><span class=\"comment\"># print(r.cookies)</span></span><br><span class=\"line\"><span class=\"comment\"># print(r.content.decode('utf-8'))</span></span><br><span class=\"line\"><span class=\"comment\"># res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)</span></span><br><span class=\"line\"><span class=\"comment\">#print(res.content.decode('utf-8'))</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> r.url == <span class=\"string\">'https://movie.douban.com/mine'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Login successfully!!!'</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span></span><br><span class=\"line\"><span class=\"string\">'我看过的电影'</span>, <span class=\"string\">'-'</span> * <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"comment\"># 获取看过的电影</span></span><br><span class=\"line\">soup = BeautifulSoup(page, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">result = soup.findAll(<span class=\"string\">'li'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">    s=item.find(<span class=\"string\">'a'</span>, class_=<span class=\"string\">\"cover\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        <span class=\"comment\"># print(s)</span></span><br><span class=\"line\">        print(s.get(<span class=\"string\">\"href\"</span>))</span><br><span class=\"line\">        print(s.img[<span class=\"string\">\"alt\"</span>])</span><br><span class=\"line\">        <span class=\"comment\"># for img in  s:</span></span><br><span class=\"line\">        <span class=\"comment\">#     print(img[\"alt\"])</span></span><br><span class=\"line\">        <span class=\"comment\">#     print(img.alt)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span></span><br><span class=\"line\"><span class=\"string\">\"failed!\"</span></span><br></pre></td></tr></table></figure><p></p>"},{"title":"Git Command","date":"2020-07-27T14:22:20.000Z","_content":"```\nmkdir mygit\ngit init\ngit add readme.txt\ngit commit -m \"git test\"\ngit status\ngit diff readme.txt\ngit log //查看修改内容\n如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：\ngit log --pretty=oneline\ngit reset --hard HEAD^ //回退到上一个版本\ngit reset --hard HEAD^ //回退到上上个版本\ngit reset --hard HEAD~100 //回退到上100个版本\n\ngit reflog //记录每次commit记录\ngit reset --hard 1094a //版本号从reflog获得\n\ngit checkout -- readme.txt //把readme.txt文件在工作区的修改全部撤销，git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。\n\ngit reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区\n\n//删除文件\ngit rm test.txt\ngit commit -m \"rm test.txt\"\n\n\n```\n<!--more-->\n```\ngit branch查看分支，*表示目前所在的分支\ngit checkout -b dev：\n    git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：\n    $ git branch dev\n    $ git checkout dev 切换分支\ngit merge dev 合并dev分支到master上\ngit branch -d dev 删除dev分支\n\n\nGit鼓励大量使用分支：\n\n查看分支：git branch\n\n创建分支：git branch <name>\n\n切换分支：git checkout <name>或者git switch <name>\n\n创建+切换分支：git checkout -b <name>或者git switch -c <name>\n\n合并某分支到当前分支：git merge <name>\n\n删除分支：git branch -d <name>\n\n总结：先创建分支，原话修改代码，最后合并到master上\n```\n\n\n\n# [git-ssh 配置和使用](https://segmentfault.com/a/1190000002645623)\n\nhttps://segmentfault.com/a/1190000002645623\n","source":"_posts/GitCommand.md","raw":"---\ntitle: Git Command\ndate: 2020-07-27 22:22:20\ntags:\ncategories:\n  - Git\n\n---\n```\nmkdir mygit\ngit init\ngit add readme.txt\ngit commit -m \"git test\"\ngit status\ngit diff readme.txt\ngit log //查看修改内容\n如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：\ngit log --pretty=oneline\ngit reset --hard HEAD^ //回退到上一个版本\ngit reset --hard HEAD^ //回退到上上个版本\ngit reset --hard HEAD~100 //回退到上100个版本\n\ngit reflog //记录每次commit记录\ngit reset --hard 1094a //版本号从reflog获得\n\ngit checkout -- readme.txt //把readme.txt文件在工作区的修改全部撤销，git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。\n\ngit reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区\n\n//删除文件\ngit rm test.txt\ngit commit -m \"rm test.txt\"\n\n\n```\n<!--more-->\n```\ngit branch查看分支，*表示目前所在的分支\ngit checkout -b dev：\n    git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：\n    $ git branch dev\n    $ git checkout dev 切换分支\ngit merge dev 合并dev分支到master上\ngit branch -d dev 删除dev分支\n\n\nGit鼓励大量使用分支：\n\n查看分支：git branch\n\n创建分支：git branch <name>\n\n切换分支：git checkout <name>或者git switch <name>\n\n创建+切换分支：git checkout -b <name>或者git switch -c <name>\n\n合并某分支到当前分支：git merge <name>\n\n删除分支：git branch -d <name>\n\n总结：先创建分支，原话修改代码，最后合并到master上\n```\n\n\n\n# [git-ssh 配置和使用](https://segmentfault.com/a/1190000002645623)\n\nhttps://segmentfault.com/a/1190000002645623\n","slug":"GitCommand","published":1,"updated":"2020-08-15T12:45:51.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdvqa0t60000tov4sspt6pdk","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir mygit</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add readme.txt</span><br><span class=\"line\">git commit -m &quot;git test&quot;</span><br><span class=\"line\">git status</span><br><span class=\"line\">git diff readme.txt</span><br><span class=\"line\">git log //查看修改内容</span><br><span class=\"line\">如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：</span><br><span class=\"line\">git log --pretty=oneline</span><br><span class=\"line\">git reset --hard HEAD^ //回退到上一个版本</span><br><span class=\"line\">git reset --hard HEAD^ //回退到上上个版本</span><br><span class=\"line\">git reset --hard HEAD~100 //回退到上100个版本</span><br><span class=\"line\"></span><br><span class=\"line\">git reflog //记录每次commit记录</span><br><span class=\"line\">git reset --hard 1094a //版本号从reflog获得</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- readme.txt //把readme.txt文件在工作区的修改全部撤销，git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD &lt;file&gt;可以把暂存区的修改撤销掉（unstage），重新放回工作区</span><br><span class=\"line\"></span><br><span class=\"line\">//删除文件</span><br><span class=\"line\">git rm test.txt</span><br><span class=\"line\">git commit -m &quot;rm test.txt&quot;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch查看分支，*表示目前所在的分支</span><br><span class=\"line\">git checkout -b dev：</span><br><span class=\"line\">    git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：</span><br><span class=\"line\">    $ git branch dev</span><br><span class=\"line\">    $ git checkout dev 切换分支</span><br><span class=\"line\">git merge dev 合并dev分支到master上</span><br><span class=\"line\">git branch -d dev 删除dev分支</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Git鼓励大量使用分支：</span><br><span class=\"line\"></span><br><span class=\"line\">查看分支：git branch</span><br><span class=\"line\"></span><br><span class=\"line\">创建分支：git branch &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">切换分支：git checkout &lt;name&gt;或者git switch &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">创建+切换分支：git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">合并某分支到当前分支：git merge &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">删除分支：git branch -d &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">总结：先创建分支，原话修改代码，最后合并到master上</span><br></pre></td></tr></table></figure>\n<h1 id=\"git-ssh-配置和使用\"><a href=\"#git-ssh-配置和使用\" class=\"headerlink\" title=\"git-ssh 配置和使用\"></a><a href=\"https://segmentfault.com/a/1190000002645623\" target=\"_blank\" rel=\"noopener\">git-ssh 配置和使用</a></h1><p><a href=\"https://segmentfault.com/a/1190000002645623\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000002645623</a></p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir mygit</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add readme.txt</span><br><span class=\"line\">git commit -m &quot;git test&quot;</span><br><span class=\"line\">git status</span><br><span class=\"line\">git diff readme.txt</span><br><span class=\"line\">git log //查看修改内容</span><br><span class=\"line\">如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：</span><br><span class=\"line\">git log --pretty=oneline</span><br><span class=\"line\">git reset --hard HEAD^ //回退到上一个版本</span><br><span class=\"line\">git reset --hard HEAD^ //回退到上上个版本</span><br><span class=\"line\">git reset --hard HEAD~100 //回退到上100个版本</span><br><span class=\"line\"></span><br><span class=\"line\">git reflog //记录每次commit记录</span><br><span class=\"line\">git reset --hard 1094a //版本号从reflog获得</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- readme.txt //把readme.txt文件在工作区的修改全部撤销，git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD &lt;file&gt;可以把暂存区的修改撤销掉（unstage），重新放回工作区</span><br><span class=\"line\"></span><br><span class=\"line\">//删除文件</span><br><span class=\"line\">git rm test.txt</span><br><span class=\"line\">git commit -m &quot;rm test.txt&quot;</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch查看分支，*表示目前所在的分支</span><br><span class=\"line\">git checkout -b dev：</span><br><span class=\"line\">    git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：</span><br><span class=\"line\">    $ git branch dev</span><br><span class=\"line\">    $ git checkout dev 切换分支</span><br><span class=\"line\">git merge dev 合并dev分支到master上</span><br><span class=\"line\">git branch -d dev 删除dev分支</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Git鼓励大量使用分支：</span><br><span class=\"line\"></span><br><span class=\"line\">查看分支：git branch</span><br><span class=\"line\"></span><br><span class=\"line\">创建分支：git branch &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">切换分支：git checkout &lt;name&gt;或者git switch &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">创建+切换分支：git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">合并某分支到当前分支：git merge &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">删除分支：git branch -d &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">总结：先创建分支，原话修改代码，最后合并到master上</span><br></pre></td></tr></table></figure>\n<h1 id=\"git-ssh-配置和使用\"><a href=\"#git-ssh-配置和使用\" class=\"headerlink\" title=\"git-ssh 配置和使用\"></a><a href=\"https://segmentfault.com/a/1190000002645623\" target=\"_blank\" rel=\"noopener\">git-ssh 配置和使用</a></h1><p><a href=\"https://segmentfault.com/a/1190000002645623\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000002645623</a></p>"},{"title":"RabbitMQ_Consumer Acknowledgements and Publisher Confirms(6)","author":"Kevin Zhou","date":"2018-09-07T14:01:00.000Z","_content":"# Background:\nSometimes the consumers may crash or have connection issues. In this case,We may miss the queue messages  if we set the  acknowledgement to auto confirm, Please ses the following code:\nReceive project code:\n```Csharp\n   ConsumeMsg(args, \"DirectTestQueue\");\n    static void ConsumeMsg(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                       Console.WriteLine(\"queue:\"+queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        Thread.Sleep(60000);\n                        Console.WriteLine(\" [x] Done\");\n                        //channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually send message acknowledgments\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: true, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n        }\n\n```\n<!--more-->\nThis consumer will sleep 1 minutes once consumer receive th message. Then please press CTR+C to quit this console  application,you will find no message in the queue, We have missed the message due to consumer issues. How to handle this scenario?\n\n1. We only  need to do a bit changes for our code，Please see the code as below:\n\n```Csharp\n static void ConsumeMsg(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                       Console.WriteLine(\"queue:\"+queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        Thread.Sleep(60000);\n                        Console.WriteLine(\" [x] Done\");\n                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually send message acknowledgments\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n        }\n```\n2.Run the receive project and quit this console application once the message found in the screen\n\n{% asset_img command.png command %}\n\n2.Check the queue via RabbitMQ management once you quit this console application,You will find this queue message is still in the queue\n\n\n{% asset_img queue1.png Unacked message %}\n\n{% asset_img queue.png No consumed message %}","source":"_posts/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6.md","raw":"title: RabbitMQ_Consumer Acknowledgements and Publisher Confirms(6)\nauthor: Kevin Zhou\ntags:\n  - RabbitMQ\n  - 'C#'\ncategories:\n  - RabbitMQ\ndate: 2018-09-07 22:01:00\n---\n# Background:\nSometimes the consumers may crash or have connection issues. In this case,We may miss the queue messages  if we set the  acknowledgement to auto confirm, Please ses the following code:\nReceive project code:\n```Csharp\n   ConsumeMsg(args, \"DirectTestQueue\");\n    static void ConsumeMsg(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                       Console.WriteLine(\"queue:\"+queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        Thread.Sleep(60000);\n                        Console.WriteLine(\" [x] Done\");\n                        //channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually send message acknowledgments\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: true, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n        }\n\n```\n<!--more-->\nThis consumer will sleep 1 minutes once consumer receive th message. Then please press CTR+C to quit this console  application,you will find no message in the queue, We have missed the message due to consumer issues. How to handle this scenario?\n\n1. We only  need to do a bit changes for our code，Please see the code as below:\n\n```Csharp\n static void ConsumeMsg(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                       Console.WriteLine(\"queue:\"+queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        Thread.Sleep(60000);\n                        Console.WriteLine(\" [x] Done\");\n                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually send message acknowledgments\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n        }\n```\n2.Run the receive project and quit this console application once the message found in the screen\n\n{% asset_img command.png command %}\n\n2.Check the queue via RabbitMQ management once you quit this console application,You will find this queue message is still in the queue\n\n\n{% asset_img queue1.png Unacked message %}\n\n{% asset_img queue.png No consumed message %}","slug":"RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6","published":1,"updated":"2020-08-15T12:45:51.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdvqa0tc0001tov4aaug3f1c","content":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background:\"></a>Background:</h1><p>Sometimes the consumers may crash or have connection issues. In this case,We may miss the queue messages  if we set the  acknowledgement to auto confirm, Please ses the following code:<br>Receive project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConsumeMsg</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> queueName</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">         <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 channel.QueueDeclare(queue: queueName, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                 <span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">                 consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"queue:\"</span>+queueName);</span><br><span class=\"line\">                     Console.WriteLine(<span class=\"string\">\"[x] Received &#123;0&#125;\"</span>, message);</span><br><span class=\"line\">                     Thread.Sleep(<span class=\"number\">60000</span>);</span><br><span class=\"line\">                     Console.WriteLine(<span class=\"string\">\" [x] Done\"</span>);</span><br><span class=\"line\">                     <span class=\"comment\">//channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually send message acknowledgments</span></span><br><span class=\"line\"></span><br><span class=\"line\">                 &#125;;</span><br><span class=\"line\">                 channel.BasicConsume(queue: queueName, autoAck: <span class=\"literal\">true</span>, consumer: consumer);</span><br><span class=\"line\">                 Console.WriteLine(<span class=\"string\">\" Press [enter] to exit.\"</span>);</span><br><span class=\"line\">                 Console.ReadLine();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>This consumer will sleep 1 minutes once consumer receive th message. Then please press CTR+C to quit this console  application,you will find no message in the queue, We have missed the message due to consumer issues. How to handle this scenario?</p>\n<ol>\n<li>We only  need to do a bit changes for our code，Please see the code as below:</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConsumeMsg</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> queueName</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   channel.QueueDeclare(queue: queueName, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">                   consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                      Console.WriteLine(<span class=\"string\">\"queue:\"</span>+queueName);</span><br><span class=\"line\">                       Console.WriteLine(<span class=\"string\">\"[x] Received &#123;0&#125;\"</span>, message);</span><br><span class=\"line\">                       Thread.Sleep(<span class=\"number\">60000</span>);</span><br><span class=\"line\">                       Console.WriteLine(<span class=\"string\">\" [x] Done\"</span>);</span><br><span class=\"line\">                       channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: <span class=\"literal\">false</span>); <span class=\"comment\">//Manually send message acknowledgments</span></span><br><span class=\"line\"></span><br><span class=\"line\">                   &#125;;</span><br><span class=\"line\">                   channel.BasicConsume(queue: queueName, autoAck: <span class=\"literal\">false</span>, consumer: consumer);</span><br><span class=\"line\">                   Console.WriteLine(<span class=\"string\">\" Press [enter] to exit.\"</span>);</span><br><span class=\"line\">                   Console.ReadLine();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>2.Run the receive project and quit this console application once the message found in the screen</p>\n<img src=\"/2018/09/07/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/command.png\" title=\"command\">\n<p>2.Check the queue via RabbitMQ management once you quit this console application,You will find this queue message is still in the queue</p>\n<img src=\"/2018/09/07/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/queue1.png\" title=\"Unacked message\">\n<img src=\"/2018/09/07/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/queue.png\" title=\"No consumed message\">","site":{"data":{}},"excerpt":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background:\"></a>Background:</h1><p>Sometimes the consumers may crash or have connection issues. In this case,We may miss the queue messages  if we set the  acknowledgement to auto confirm, Please ses the following code:<br>Receive project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConsumeMsg</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> queueName</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">         <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 channel.QueueDeclare(queue: queueName, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                 <span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">                 consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"queue:\"</span>+queueName);</span><br><span class=\"line\">                     Console.WriteLine(<span class=\"string\">\"[x] Received &#123;0&#125;\"</span>, message);</span><br><span class=\"line\">                     Thread.Sleep(<span class=\"number\">60000</span>);</span><br><span class=\"line\">                     Console.WriteLine(<span class=\"string\">\" [x] Done\"</span>);</span><br><span class=\"line\">                     <span class=\"comment\">//channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually send message acknowledgments</span></span><br><span class=\"line\"></span><br><span class=\"line\">                 &#125;;</span><br><span class=\"line\">                 channel.BasicConsume(queue: queueName, autoAck: <span class=\"literal\">true</span>, consumer: consumer);</span><br><span class=\"line\">                 Console.WriteLine(<span class=\"string\">\" Press [enter] to exit.\"</span>);</span><br><span class=\"line\">                 Console.ReadLine();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>This consumer will sleep 1 minutes once consumer receive th message. Then please press CTR+C to quit this console  application,you will find no message in the queue, We have missed the message due to consumer issues. How to handle this scenario?</p>\n<ol>\n<li>We only  need to do a bit changes for our code，Please see the code as below:</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConsumeMsg</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> queueName</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   channel.QueueDeclare(queue: queueName, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">                   consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                      Console.WriteLine(<span class=\"string\">\"queue:\"</span>+queueName);</span><br><span class=\"line\">                       Console.WriteLine(<span class=\"string\">\"[x] Received &#123;0&#125;\"</span>, message);</span><br><span class=\"line\">                       Thread.Sleep(<span class=\"number\">60000</span>);</span><br><span class=\"line\">                       Console.WriteLine(<span class=\"string\">\" [x] Done\"</span>);</span><br><span class=\"line\">                       channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: <span class=\"literal\">false</span>); <span class=\"comment\">//Manually send message acknowledgments</span></span><br><span class=\"line\"></span><br><span class=\"line\">                   &#125;;</span><br><span class=\"line\">                   channel.BasicConsume(queue: queueName, autoAck: <span class=\"literal\">false</span>, consumer: consumer);</span><br><span class=\"line\">                   Console.WriteLine(<span class=\"string\">\" Press [enter] to exit.\"</span>);</span><br><span class=\"line\">                   Console.ReadLine();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>2.Run the receive project and quit this console application once the message found in the screen</p>\n<img src=\"/2018/09/07/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/command.png\" title=\"command\">\n<p>2.Check the queue via RabbitMQ management once you quit this console application,You will find this queue message is still in the queue</p>\n<img src=\"/2018/09/07/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/queue1.png\" title=\"Unacked message\">\n<img src=\"/2018/09/07/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/queue.png\" title=\"No consumed message\">"},{"title":"RabbitMQ_ExchangeType Topic(4)","author":"Kevin Zhou","date":"2018-09-05T01:48:00.000Z","_content":"Exchange: Exchange is a rout map\nExchangeType: Topic, the message will be pushed to the specified queues which are matched to the Routingkey like  regular expression.\n1.Send project code:\n```Csharp\n  TopicExchangeTest(args, \"TopicQueue\");\n static void TopicExchangeTest(string[] args, string quename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    string exchangeName = \"TopicTest\";\n                    string routingKey = \"TopicRK.*\";  //* for single word ,# for multiple words\n                    channel.ExchangeDeclare(exchangeName, ExchangeType.Topic, false, false, null);\n                    channel.QueueDeclare(queue: quename, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueBind(quename, exchangeName, routingKey, null);\n                    string message = args.Length > 0 ? exchangeName + \" \" + args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchangeName, \"TopicRK.one\", basicProperties: null, body: body);\n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n```\n<!--more-->\n2.Receive project code:\n```Csharp\nConsumeMsg(args, \"TopicQueue\");\n```\n3.Run command for Send,The Routingkey is \"TopicRK.one\"\n\n\n{% asset_img Send.png SendCmd %}\n4.Run command for Receive\n\n{% asset_img receive.png receive %}\n5.Publish a message and The Routingkey is \"TopicRK.one.123\", The message will not be routed\n{% asset_img RMQpng.png RMQpng %}\n\n\n\n\n \n","source":"_posts/RabbitMQ-ExchangeType-Topic-4.md","raw":"title: RabbitMQ_ExchangeType Topic(4)\nauthor: Kevin Zhou\ntags:\n  - RabbitMQ\n  - 'C#'\ncategories:\n  - RabbitMQ\ndate: 2018-09-05 09:48:00\n---\nExchange: Exchange is a rout map\nExchangeType: Topic, the message will be pushed to the specified queues which are matched to the Routingkey like  regular expression.\n1.Send project code:\n```Csharp\n  TopicExchangeTest(args, \"TopicQueue\");\n static void TopicExchangeTest(string[] args, string quename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    string exchangeName = \"TopicTest\";\n                    string routingKey = \"TopicRK.*\";  //* for single word ,# for multiple words\n                    channel.ExchangeDeclare(exchangeName, ExchangeType.Topic, false, false, null);\n                    channel.QueueDeclare(queue: quename, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueBind(quename, exchangeName, routingKey, null);\n                    string message = args.Length > 0 ? exchangeName + \" \" + args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchangeName, \"TopicRK.one\", basicProperties: null, body: body);\n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n```\n<!--more-->\n2.Receive project code:\n```Csharp\nConsumeMsg(args, \"TopicQueue\");\n```\n3.Run command for Send,The Routingkey is \"TopicRK.one\"\n\n\n{% asset_img Send.png SendCmd %}\n4.Run command for Receive\n\n{% asset_img receive.png receive %}\n5.Publish a message and The Routingkey is \"TopicRK.one.123\", The message will not be routed\n{% asset_img RMQpng.png RMQpng %}\n\n\n\n\n \n","slug":"RabbitMQ-ExchangeType-Topic-4","published":1,"updated":"2020-08-15T12:45:51.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdvqa0tk0003tov4fbv585hl","content":"<p>Exchange: Exchange is a rout map<br>ExchangeType: Topic, the message will be pushed to the specified queues which are matched to the Routingkey like  regular expression.<br>1.Send project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> TopicExchangeTest(args, <span class=\"string\">\"TopicQueue\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TopicExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> quename</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">string</span> exchangeName = <span class=\"string\">\"TopicTest\"</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">string</span> routingKey = <span class=\"string\">\"TopicRK.*\"</span>;  <span class=\"comment\">//* for single word ,# for multiple words</span></span><br><span class=\"line\">                   channel.ExchangeDeclare(exchangeName, ExchangeType.Topic, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                   channel.QueueDeclare(queue: quename, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                   channel.QueueBind(quename, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? exchangeName + <span class=\"string\">\" \"</span> + args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                   channel.BasicPublish(exchangeName, <span class=\"string\">\"TopicRK.one\"</span>, basicProperties: <span class=\"literal\">null</span>, body: body);</span><br><span class=\"line\">                   Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.Receive project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"TopicQueue\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>3.Run command for Send,The Routingkey is “TopicRK.one”</p>\n<img src=\"/2018/09/05/RabbitMQ-ExchangeType-Topic-4/Send.png\" title=\"SendCmd\">\n<p>4.Run command for Receive</p>\n<img src=\"/2018/09/05/RabbitMQ-ExchangeType-Topic-4/receive.png\" title=\"receive\">\n<p>5.Publish a message and The Routingkey is “TopicRK.one.123”, The message will not be routed<br><img src=\"/2018/09/05/RabbitMQ-ExchangeType-Topic-4/RMQpng.png\" title=\"RMQpng\"></p>\n","site":{"data":{}},"excerpt":"<p>Exchange: Exchange is a rout map<br>ExchangeType: Topic, the message will be pushed to the specified queues which are matched to the Routingkey like  regular expression.<br>1.Send project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> TopicExchangeTest(args, <span class=\"string\">\"TopicQueue\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TopicExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> quename</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">string</span> exchangeName = <span class=\"string\">\"TopicTest\"</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">string</span> routingKey = <span class=\"string\">\"TopicRK.*\"</span>;  <span class=\"comment\">//* for single word ,# for multiple words</span></span><br><span class=\"line\">                   channel.ExchangeDeclare(exchangeName, ExchangeType.Topic, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                   channel.QueueDeclare(queue: quename, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                   channel.QueueBind(quename, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? exchangeName + <span class=\"string\">\" \"</span> + args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                   channel.BasicPublish(exchangeName, <span class=\"string\">\"TopicRK.one\"</span>, basicProperties: <span class=\"literal\">null</span>, body: body);</span><br><span class=\"line\">                   Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>2.Receive project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"TopicQueue\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>3.Run command for Send,The Routingkey is “TopicRK.one”</p>\n<img src=\"/2018/09/05/RabbitMQ-ExchangeType-Topic-4/Send.png\" title=\"SendCmd\">\n<p>4.Run command for Receive</p>\n<img src=\"/2018/09/05/RabbitMQ-ExchangeType-Topic-4/receive.png\" title=\"receive\">\n<p>5.Publish a message and The Routingkey is “TopicRK.one.123”, The message will not be routed<br><img src=\"/2018/09/05/RabbitMQ-ExchangeType-Topic-4/RMQpng.png\" title=\"RMQpng\"></p>"},{"title":"RabbitMQ_ExchangeType Fanout(3)","author":"Kevin Zhou","date":"2018-08-30T06:26:00.000Z","_content":"Exchange: Exchange is a rout map\nExchangeType: FanOut, the message will be pushed to all queues which bind to queue,Routingkey is not needed\n1.Send project code:\n```Csharp\nFanOutExchangeTest(args);\nstatic void FanOutExchangeTest(string[] args)\n        {\n            string queueName1 = \"Queue1\";\n            string queueName2 = \"Queue2\";\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    string exchangeName = \"FanOutTest\";\n                    string routingKey = \"\";\n                    channel.ExchangeDeclare(exchangeName, ExchangeType.Fanout, false, false, null);\n                    channel.QueueDeclare(queue: queueName1, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueDeclare(queue: queueName2, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueBind(queueName1, exchangeName, routingKey, null);\n                    channel.QueueBind(queueName2, exchangeName, routingKey, null);\n                    string message = args.Length > 0 ? exchangeName + \" \" + args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchangeName, routingKey, basicProperties: null, body: body);\n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n```\n<!--more-->\n2. Receive project code:\n```Csharp\n ConsumeMsg(args, \"Queue1\");\n ConsumeMsg(args, \"Queue2\");\n```\n3.Run command for Send\n\n\n{% asset_img Sendcmd.png SendCmd %}\n\n\n{% asset_img FanOutExchange.png FanOutExchange %}\n\n4.Run command for receive\n\n{% asset_img Receivecmd.png Receivecmd %}\n\n{% asset_img Queue.png Queue %}","source":"_posts/RabbitMQ-ExchangeType-Fanout-3.md","raw":"title: RabbitMQ_ExchangeType Fanout(3)\nauthor: Kevin Zhou\ntags:\n  - RabbitMQ\n  - 'C#'\ncategories:\n  - RabbitMQ\ndate: 2018-08-30 14:26:00\n---\nExchange: Exchange is a rout map\nExchangeType: FanOut, the message will be pushed to all queues which bind to queue,Routingkey is not needed\n1.Send project code:\n```Csharp\nFanOutExchangeTest(args);\nstatic void FanOutExchangeTest(string[] args)\n        {\n            string queueName1 = \"Queue1\";\n            string queueName2 = \"Queue2\";\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    string exchangeName = \"FanOutTest\";\n                    string routingKey = \"\";\n                    channel.ExchangeDeclare(exchangeName, ExchangeType.Fanout, false, false, null);\n                    channel.QueueDeclare(queue: queueName1, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueDeclare(queue: queueName2, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueBind(queueName1, exchangeName, routingKey, null);\n                    channel.QueueBind(queueName2, exchangeName, routingKey, null);\n                    string message = args.Length > 0 ? exchangeName + \" \" + args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchangeName, routingKey, basicProperties: null, body: body);\n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n```\n<!--more-->\n2. Receive project code:\n```Csharp\n ConsumeMsg(args, \"Queue1\");\n ConsumeMsg(args, \"Queue2\");\n```\n3.Run command for Send\n\n\n{% asset_img Sendcmd.png SendCmd %}\n\n\n{% asset_img FanOutExchange.png FanOutExchange %}\n\n4.Run command for receive\n\n{% asset_img Receivecmd.png Receivecmd %}\n\n{% asset_img Queue.png Queue %}","slug":"RabbitMQ-ExchangeType-Fanout-3","published":1,"updated":"2020-08-15T12:45:51.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdvqa0to0005tov40xv5tsc9","content":"<p>Exchange: Exchange is a rout map<br>ExchangeType: FanOut, the message will be pushed to all queues which bind to queue,Routingkey is not needed<br>1.Send project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FanOutExchangeTest(args);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">FanOutExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> queueName1 = <span class=\"string\">\"Queue1\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> queueName2 = <span class=\"string\">\"Queue2\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> exchangeName = <span class=\"string\">\"FanOutTest\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> routingKey = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    channel.ExchangeDeclare(exchangeName, ExchangeType.Fanout, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueDeclare(queue: queueName1, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueDeclare(queue: queueName2, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueBind(queueName1, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueBind(queueName2, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? exchangeName + <span class=\"string\">\" \"</span> + args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                    channel.BasicPublish(exchangeName, routingKey, basicProperties: <span class=\"literal\">null</span>, body: body);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li>Receive project code:<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"Queue1\"</span>);</span><br><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"Queue2\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>3.Run command for Send</p>\n<img src=\"/2018/08/30/RabbitMQ-ExchangeType-Fanout-3/Sendcmd.png\" title=\"SendCmd\">\n<img src=\"/2018/08/30/RabbitMQ-ExchangeType-Fanout-3/FanOutExchange.png\" title=\"FanOutExchange\">\n<p>4.Run command for receive</p>\n<img src=\"/2018/08/30/RabbitMQ-ExchangeType-Fanout-3/Receivecmd.png\" title=\"Receivecmd\">\n<img src=\"/2018/08/30/RabbitMQ-ExchangeType-Fanout-3/Queue.png\" title=\"Queue\">","site":{"data":{}},"excerpt":"<p>Exchange: Exchange is a rout map<br>ExchangeType: FanOut, the message will be pushed to all queues which bind to queue,Routingkey is not needed<br>1.Send project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FanOutExchangeTest(args);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">FanOutExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> queueName1 = <span class=\"string\">\"Queue1\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> queueName2 = <span class=\"string\">\"Queue2\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> exchangeName = <span class=\"string\">\"FanOutTest\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> routingKey = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    channel.ExchangeDeclare(exchangeName, ExchangeType.Fanout, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueDeclare(queue: queueName1, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueDeclare(queue: queueName2, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueBind(queueName1, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueBind(queueName2, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? exchangeName + <span class=\"string\">\" \"</span> + args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                    channel.BasicPublish(exchangeName, routingKey, basicProperties: <span class=\"literal\">null</span>, body: body);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>","more":"<ol start=\"2\">\n<li>Receive project code:<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"Queue1\"</span>);</span><br><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"Queue2\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>3.Run command for Send</p>\n<img src=\"/2018/08/30/RabbitMQ-ExchangeType-Fanout-3/Sendcmd.png\" title=\"SendCmd\">\n<img src=\"/2018/08/30/RabbitMQ-ExchangeType-Fanout-3/FanOutExchange.png\" title=\"FanOutExchange\">\n<p>4.Run command for receive</p>\n<img src=\"/2018/08/30/RabbitMQ-ExchangeType-Fanout-3/Receivecmd.png\" title=\"Receivecmd\">\n<img src=\"/2018/08/30/RabbitMQ-ExchangeType-Fanout-3/Queue.png\" title=\"Queue\">"},{"title":"RabbitMQ_No Exchange (1)","author":"Kevin Zhou","date":"2018-08-29T14:18:00.000Z","_content":"### No Exchange test\n1.Install RabbitMQ :https://www.rabbitmq.com/download.html \n2.Create two .net core projects for testing: Send and Receive\n3.Send project Code:\n```Csharp\n   static void Main(string[] args)\n        {\n           NoExchangeTest(args,\"NoExchangeQueue\");           \n        }     \n         static void NoExchangeTest(string[] args,string queuename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queuename, durable: false, exclusive: false, autoDelete: false, arguments: null);\n\n                    string message = args.Length > 0 ? args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchange: \"\", routingKey: queuename, basicProperties: null, body: body); \n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n```\n<!--more-->\n\n  Receive project code:\n  ```Csharp\n  static void Main(string[] args)\n        {\n             ConsumeMsg(args, \"NoExchangeQueue\");\n           \n        }\n        \n          static void ConsumeMsg(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                       Console.WriteLine(\"queue:\"+queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        Thread.Sleep(6000);\n                        Console.WriteLine(\" [x] Done\");\n                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually send message acknowledgments\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n        }\n     ```\n4.Run Receive:\n  ```\n  dotnet run \n  ```\n  \n\n{% asset_img pasted-1.png This is an image %}\n5.Run Send:\n  ```\n  dotnet run \"aaa\"\n  ```\n  \n\n{% asset_img pasted-0.png This is an image %}\n6.Open RabitMQ admin :http://localhost:15672/ usrname :guest password:guest\n7.Click queue tab,you will find a new queue was created named \"NoExchangeQueue\"\n{% asset_img NoExchangeQueue.png This is an image %}\n","source":"_posts/RabbitMQ-No-Exchange-1.md","raw":"title: RabbitMQ_No Exchange (1)\nauthor: Kevin Zhou\ntags:\n  - RabbitMQ\n  - 'C#'\ncategories:\n  - RabbitMQ\ndate: 2018-08-29 22:18:00\n---\n### No Exchange test\n1.Install RabbitMQ :https://www.rabbitmq.com/download.html \n2.Create two .net core projects for testing: Send and Receive\n3.Send project Code:\n```Csharp\n   static void Main(string[] args)\n        {\n           NoExchangeTest(args,\"NoExchangeQueue\");           \n        }     \n         static void NoExchangeTest(string[] args,string queuename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queuename, durable: false, exclusive: false, autoDelete: false, arguments: null);\n\n                    string message = args.Length > 0 ? args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchange: \"\", routingKey: queuename, basicProperties: null, body: body); \n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n```\n<!--more-->\n\n  Receive project code:\n  ```Csharp\n  static void Main(string[] args)\n        {\n             ConsumeMsg(args, \"NoExchangeQueue\");\n           \n        }\n        \n          static void ConsumeMsg(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                       Console.WriteLine(\"queue:\"+queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        Thread.Sleep(6000);\n                        Console.WriteLine(\" [x] Done\");\n                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually send message acknowledgments\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n        }\n     ```\n4.Run Receive:\n  ```\n  dotnet run \n  ```\n  \n\n{% asset_img pasted-1.png This is an image %}\n5.Run Send:\n  ```\n  dotnet run \"aaa\"\n  ```\n  \n\n{% asset_img pasted-0.png This is an image %}\n6.Open RabitMQ admin :http://localhost:15672/ usrname :guest password:guest\n7.Click queue tab,you will find a new queue was created named \"NoExchangeQueue\"\n{% asset_img NoExchangeQueue.png This is an image %}\n","slug":"RabbitMQ-No-Exchange-1","published":1,"updated":"2020-08-15T12:45:51.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdvqa0tr0006tov46f5hr687","content":"<h3 id=\"No-Exchange-test\"><a href=\"#No-Exchange-test\" class=\"headerlink\" title=\"No Exchange test\"></a>No Exchange test</h3><p>1.Install RabbitMQ :<a href=\"https://www.rabbitmq.com/download.html\" target=\"_blank\" rel=\"noopener\">https://www.rabbitmq.com/download.html</a><br>2.Create two .net core projects for testing: Send and Receive<br>3.Send project Code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">        NoExchangeTest(args,<span class=\"string\">\"NoExchangeQueue\"</span>);           </span><br><span class=\"line\">     &#125;     </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">NoExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args,<span class=\"keyword\">string</span> queuename</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">         <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 channel.QueueDeclare(queue: queuename, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                 channel.BasicPublish(exchange: <span class=\"string\">\"\"</span>, routingKey: queuename, basicProperties: <span class=\"literal\">null</span>, body: body); </span><br><span class=\"line\">                 Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>  Receive project code:<br>  <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">           ConsumeMsg(args, <span class=\"string\">\"NoExchangeQueue\"</span>);</span><br><span class=\"line\">         </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConsumeMsg</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> queueName</span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">          <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  channel.QueueDeclare(queue: queueName, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                  <span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">                  consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                     Console.WriteLine(<span class=\"string\">\"queue:\"</span>+queueName);</span><br><span class=\"line\">                      Console.WriteLine(<span class=\"string\">\"[x] Received &#123;0&#125;\"</span>, message);</span><br><span class=\"line\">                      Thread.Sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\">                      Console.WriteLine(<span class=\"string\">\" [x] Done\"</span>);</span><br><span class=\"line\">                      channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: <span class=\"literal\">false</span>); <span class=\"comment\">//Manually send message acknowledgments</span></span><br><span class=\"line\"></span><br><span class=\"line\">                  &#125;;</span><br><span class=\"line\">                  channel.BasicConsume(queue: queueName, autoAck: <span class=\"literal\">false</span>, consumer: consumer);</span><br><span class=\"line\">                  Console.WriteLine(<span class=\"string\">\" Press [enter] to exit.\"</span>);</span><br><span class=\"line\">                  Console.ReadLine();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.Run Receive:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run</span><br></pre></td></tr></table></figure></p>\n<img src=\"/2018/08/29/RabbitMQ-No-Exchange-1/pasted-1.png\" title=\"This is an image\">\n<p>5.Run Send:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run &quot;aaa&quot;</span><br></pre></td></tr></table></figure></p>\n<img src=\"/2018/08/29/RabbitMQ-No-Exchange-1/pasted-0.png\" title=\"This is an image\">\n<p>6.Open RabitMQ admin :<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> usrname :guest password:guest<br>7.Click queue tab,you will find a new queue was created named “NoExchangeQueue”<br><img src=\"/2018/08/29/RabbitMQ-No-Exchange-1/NoExchangeQueue.png\" title=\"This is an image\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"No-Exchange-test\"><a href=\"#No-Exchange-test\" class=\"headerlink\" title=\"No Exchange test\"></a>No Exchange test</h3><p>1.Install RabbitMQ :<a href=\"https://www.rabbitmq.com/download.html\" target=\"_blank\" rel=\"noopener\">https://www.rabbitmq.com/download.html</a><br>2.Create two .net core projects for testing: Send and Receive<br>3.Send project Code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">        NoExchangeTest(args,<span class=\"string\">\"NoExchangeQueue\"</span>);           </span><br><span class=\"line\">     &#125;     </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">NoExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args,<span class=\"keyword\">string</span> queuename</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">         <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 channel.QueueDeclare(queue: queuename, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                 channel.BasicPublish(exchange: <span class=\"string\">\"\"</span>, routingKey: queuename, basicProperties: <span class=\"literal\">null</span>, body: body); </span><br><span class=\"line\">                 Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>  Receive project code:<br>  <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">           ConsumeMsg(args, <span class=\"string\">\"NoExchangeQueue\"</span>);</span><br><span class=\"line\">         </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConsumeMsg</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> queueName</span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">          <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  channel.QueueDeclare(queue: queueName, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                  <span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">                  consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                     Console.WriteLine(<span class=\"string\">\"queue:\"</span>+queueName);</span><br><span class=\"line\">                      Console.WriteLine(<span class=\"string\">\"[x] Received &#123;0&#125;\"</span>, message);</span><br><span class=\"line\">                      Thread.Sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\">                      Console.WriteLine(<span class=\"string\">\" [x] Done\"</span>);</span><br><span class=\"line\">                      channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: <span class=\"literal\">false</span>); <span class=\"comment\">//Manually send message acknowledgments</span></span><br><span class=\"line\"></span><br><span class=\"line\">                  &#125;;</span><br><span class=\"line\">                  channel.BasicConsume(queue: queueName, autoAck: <span class=\"literal\">false</span>, consumer: consumer);</span><br><span class=\"line\">                  Console.WriteLine(<span class=\"string\">\" Press [enter] to exit.\"</span>);</span><br><span class=\"line\">                  Console.ReadLine();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.Run Receive:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run</span><br></pre></td></tr></table></figure></p>\n<img src=\"/2018/08/29/RabbitMQ-No-Exchange-1/pasted-1.png\" title=\"This is an image\">\n<p>5.Run Send:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run &quot;aaa&quot;</span><br></pre></td></tr></table></figure></p>\n<img src=\"/2018/08/29/RabbitMQ-No-Exchange-1/pasted-0.png\" title=\"This is an image\">\n<p>6.Open RabitMQ admin :<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> usrname :guest password:guest<br>7.Click queue tab,you will find a new queue was created named “NoExchangeQueue”<br><img src=\"/2018/08/29/RabbitMQ-No-Exchange-1/NoExchangeQueue.png\" title=\"This is an image\"></p>"},{"title":"RabbitMQ_Task distribution(7)","author":"Kevin Zhou","date":"2018-09-10T03:14:00.000Z","_content":"Firt of all ,Let's take a look the following receive code,You will find that If the message is 1,The consumer will sleep 1 seconds, if the message is 10 ,The consumer will sleep 10 seconds.\n```Csharp\nTasksDistributeLimit(args, \"DirectTestQueue\");\nstatic void TasksDistributeLimit(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                  //  channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                        Console.WriteLine(\"queue:\" + queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        int len = int.Parse(message);                        \n                        Console.WriteLine(\"Sleep:{0} seconds\", len);\n                        Thread.Sleep(len*1000);\n                        Console.WriteLine(\" [x] Done\");\n                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually confirm message\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n        }\n    }\n```\n<!--more-->\nLet's mock the following scenario:\n1.Launch two consumers:\n  ```\n  dotnet run\n  ```\n2.Send a message to make consumer sleep 1 second\n3.Send a message to make consumer sleep 2 seconds\n4.Send a message to make consumer sleep 3 seconds\n5.Send a message to make consumer sleep 4 seconds\n6.Send a message to make consumer sleep 60 seconds\n7.Send a message to make consumer sleep 1 seconds\n8.Send a message to make consumer sleep 2 seconds\n\nResult:\nConsumer1:\n{% asset_img consumer1.png consumer1 %}\n\nConsumer2:\n{% asset_img Consumer2.png Consumer2 %}\n\nConclusion:\nYou will find all messages will be ditributed equally until the consumer2 sleep 60s complete.Actually this distribution rule is not good for server since the other consumers are free, They could be able to consume these messages\n\nHow to improve the efficiency of comsumer processor:\nAdd this code in your consomer project,The consumer only fetch 1 message from queue until \nthis requst is finished. The other messages which are not fetched will be processed by the other consumers.\n```Charp\n  channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);\n```\nSee the detail code of receive:\n```Charp\n static void TasksDistributeLimit(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                        Console.WriteLine(\"queue:\" + queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        int len = int.Parse(message);                        \n                        Console.WriteLine(\"Sleep:{0} seconds\", len);\n                        Thread.Sleep(len*1000);\n                        Console.WriteLine(\" [x] Done\");\n                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually confirm message\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n```\n\nRetest this scenario we just tested:\nResult:\n\tConsumer1:   \n    \n{% asset_img Consumer1-1.png Consumer1-1 %}\n\n    Consumer2:\n    \n {% asset_img Consumer2-1.png Consumer2-1 %}\n\nConclusion:\n\nThe message will be distributed to which consumers depends on whether consumers are busy or not.","source":"_posts/RabbitMQ-Task-distribution.md","raw":"title: RabbitMQ_Task distribution(7)\nauthor: Kevin Zhou\ntags:\n  - RabbitMQ\n  - 'C#'\ncategories:\n  - RabbitMQ\ndate: 2018-09-10 11:14:00\n---\nFirt of all ,Let's take a look the following receive code,You will find that If the message is 1,The consumer will sleep 1 seconds, if the message is 10 ,The consumer will sleep 10 seconds.\n```Csharp\nTasksDistributeLimit(args, \"DirectTestQueue\");\nstatic void TasksDistributeLimit(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                  //  channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                        Console.WriteLine(\"queue:\" + queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        int len = int.Parse(message);                        \n                        Console.WriteLine(\"Sleep:{0} seconds\", len);\n                        Thread.Sleep(len*1000);\n                        Console.WriteLine(\" [x] Done\");\n                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually confirm message\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n        }\n    }\n```\n<!--more-->\nLet's mock the following scenario:\n1.Launch two consumers:\n  ```\n  dotnet run\n  ```\n2.Send a message to make consumer sleep 1 second\n3.Send a message to make consumer sleep 2 seconds\n4.Send a message to make consumer sleep 3 seconds\n5.Send a message to make consumer sleep 4 seconds\n6.Send a message to make consumer sleep 60 seconds\n7.Send a message to make consumer sleep 1 seconds\n8.Send a message to make consumer sleep 2 seconds\n\nResult:\nConsumer1:\n{% asset_img consumer1.png consumer1 %}\n\nConsumer2:\n{% asset_img Consumer2.png Consumer2 %}\n\nConclusion:\nYou will find all messages will be ditributed equally until the consumer2 sleep 60s complete.Actually this distribution rule is not good for server since the other consumers are free, They could be able to consume these messages\n\nHow to improve the efficiency of comsumer processor:\nAdd this code in your consomer project,The consumer only fetch 1 message from queue until \nthis requst is finished. The other messages which are not fetched will be processed by the other consumers.\n```Charp\n  channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);\n```\nSee the detail code of receive:\n```Charp\n static void TasksDistributeLimit(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                        Console.WriteLine(\"queue:\" + queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        int len = int.Parse(message);                        \n                        Console.WriteLine(\"Sleep:{0} seconds\", len);\n                        Thread.Sleep(len*1000);\n                        Console.WriteLine(\" [x] Done\");\n                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually confirm message\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n```\n\nRetest this scenario we just tested:\nResult:\n\tConsumer1:   \n    \n{% asset_img Consumer1-1.png Consumer1-1 %}\n\n    Consumer2:\n    \n {% asset_img Consumer2-1.png Consumer2-1 %}\n\nConclusion:\n\nThe message will be distributed to which consumers depends on whether consumers are busy or not.","slug":"RabbitMQ-Task-distribution","published":1,"updated":"2020-08-15T12:45:51.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdvqa0tv0008tov4xoo9hlx4","content":"<p>Firt of all ,Let’s take a look the following receive code,You will find that If the message is 1,The consumer will sleep 1 seconds, if the message is 10 ,The consumer will sleep 10 seconds.<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TasksDistributeLimit(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TasksDistributeLimit</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> queueName</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    channel.QueueDeclare(queue: queueName, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                  <span class=\"comment\">//  channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">                    consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                        Console.WriteLine(<span class=\"string\">\"queue:\"</span> + queueName);</span><br><span class=\"line\">                        Console.WriteLine(<span class=\"string\">\"[x] Received &#123;0&#125;\"</span>, message);</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> len = <span class=\"keyword\">int</span>.Parse(message);                        </span><br><span class=\"line\">                        Console.WriteLine(<span class=\"string\">\"Sleep:&#123;0&#125; seconds\"</span>, len);</span><br><span class=\"line\">                        Thread.Sleep(len*<span class=\"number\">1000</span>);</span><br><span class=\"line\">                        Console.WriteLine(<span class=\"string\">\" [x] Done\"</span>);</span><br><span class=\"line\">                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: <span class=\"literal\">false</span>); <span class=\"comment\">//Manually confirm message</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                    channel.BasicConsume(queue: queueName, autoAck: <span class=\"literal\">false</span>, consumer: consumer);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\" Press [enter] to exit.\"</span>);</span><br><span class=\"line\">                    Console.ReadLine();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>Let’s mock the following scenario:<br>1.Launch two consumers:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run</span><br></pre></td></tr></table></figure></p>\n<p>2.Send a message to make consumer sleep 1 second<br>3.Send a message to make consumer sleep 2 seconds<br>4.Send a message to make consumer sleep 3 seconds<br>5.Send a message to make consumer sleep 4 seconds<br>6.Send a message to make consumer sleep 60 seconds<br>7.Send a message to make consumer sleep 1 seconds<br>8.Send a message to make consumer sleep 2 seconds</p>\n<p>Result:<br>Consumer1:<br><img src=\"/2018/09/10/RabbitMQ-Task-distribution/consumer1.png\" title=\"consumer1\"></p>\n<p>Consumer2:<br><img src=\"/2018/09/10/RabbitMQ-Task-distribution/Consumer2.png\" title=\"Consumer2\"></p>\n<p>Conclusion:<br>You will find all messages will be ditributed equally until the consumer2 sleep 60s complete.Actually this distribution rule is not good for server since the other consumers are free, They could be able to consume these messages</p>\n<p>How to improve the efficiency of comsumer processor:<br>Add this code in your consomer project,The consumer only fetch 1 message from queue until<br>this requst is finished. The other messages which are not fetched will be processed by the other consumers.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);</span><br></pre></td></tr></table></figure></p>\n<p>See the detail code of receive:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void TasksDistributeLimit(string[] args, string queueName)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;</span><br><span class=\"line\">           using (var connection = factory.CreateConnection())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               using (var channel = connection.CreateModel())</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);</span><br><span class=\"line\">                   channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);</span><br><span class=\"line\">                   var consumer = new EventingBasicConsumer(channel);</span><br><span class=\"line\">                   consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       var message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                       Console.WriteLine(&quot;queue:&quot; + queueName);</span><br><span class=\"line\">                       Console.WriteLine(&quot;[x] Received &#123;0&#125;&quot;, message);</span><br><span class=\"line\">                       int len = int.Parse(message);                        </span><br><span class=\"line\">                       Console.WriteLine(&quot;Sleep:&#123;0&#125; seconds&quot;, len);</span><br><span class=\"line\">                       Thread.Sleep(len*1000);</span><br><span class=\"line\">                       Console.WriteLine(&quot; [x] Done&quot;);</span><br><span class=\"line\">                       channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually confirm message</span><br><span class=\"line\"></span><br><span class=\"line\">                   &#125;;</span><br><span class=\"line\">                   channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);</span><br><span class=\"line\">                   Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class=\"line\">                   Console.ReadLine();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure></p>\n<p>Retest this scenario we just tested:<br>Result:<br>    Consumer1:   </p>\n<img src=\"/2018/09/10/RabbitMQ-Task-distribution/Consumer1-1.png\" title=\"Consumer1-1\">\n<pre><code>Consumer2:\n</code></pre> <img src=\"/2018/09/10/RabbitMQ-Task-distribution/Consumer2-1.png\" title=\"Consumer2-1\">\n<p>Conclusion:</p>\n<p>The message will be distributed to which consumers depends on whether consumers are busy or not.</p>\n","site":{"data":{}},"excerpt":"<p>Firt of all ,Let’s take a look the following receive code,You will find that If the message is 1,The consumer will sleep 1 seconds, if the message is 10 ,The consumer will sleep 10 seconds.<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TasksDistributeLimit(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TasksDistributeLimit</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> queueName</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    channel.QueueDeclare(queue: queueName, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                  <span class=\"comment\">//  channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">                    consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                        Console.WriteLine(<span class=\"string\">\"queue:\"</span> + queueName);</span><br><span class=\"line\">                        Console.WriteLine(<span class=\"string\">\"[x] Received &#123;0&#125;\"</span>, message);</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> len = <span class=\"keyword\">int</span>.Parse(message);                        </span><br><span class=\"line\">                        Console.WriteLine(<span class=\"string\">\"Sleep:&#123;0&#125; seconds\"</span>, len);</span><br><span class=\"line\">                        Thread.Sleep(len*<span class=\"number\">1000</span>);</span><br><span class=\"line\">                        Console.WriteLine(<span class=\"string\">\" [x] Done\"</span>);</span><br><span class=\"line\">                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: <span class=\"literal\">false</span>); <span class=\"comment\">//Manually confirm message</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                    channel.BasicConsume(queue: queueName, autoAck: <span class=\"literal\">false</span>, consumer: consumer);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\" Press [enter] to exit.\"</span>);</span><br><span class=\"line\">                    Console.ReadLine();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>Let’s mock the following scenario:<br>1.Launch two consumers:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run</span><br></pre></td></tr></table></figure></p>\n<p>2.Send a message to make consumer sleep 1 second<br>3.Send a message to make consumer sleep 2 seconds<br>4.Send a message to make consumer sleep 3 seconds<br>5.Send a message to make consumer sleep 4 seconds<br>6.Send a message to make consumer sleep 60 seconds<br>7.Send a message to make consumer sleep 1 seconds<br>8.Send a message to make consumer sleep 2 seconds</p>\n<p>Result:<br>Consumer1:<br><img src=\"/2018/09/10/RabbitMQ-Task-distribution/consumer1.png\" title=\"consumer1\"></p>\n<p>Consumer2:<br><img src=\"/2018/09/10/RabbitMQ-Task-distribution/Consumer2.png\" title=\"Consumer2\"></p>\n<p>Conclusion:<br>You will find all messages will be ditributed equally until the consumer2 sleep 60s complete.Actually this distribution rule is not good for server since the other consumers are free, They could be able to consume these messages</p>\n<p>How to improve the efficiency of comsumer processor:<br>Add this code in your consomer project,The consumer only fetch 1 message from queue until<br>this requst is finished. The other messages which are not fetched will be processed by the other consumers.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);</span><br></pre></td></tr></table></figure></p>\n<p>See the detail code of receive:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void TasksDistributeLimit(string[] args, string queueName)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot; &#125;;</span><br><span class=\"line\">           using (var connection = factory.CreateConnection())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               using (var channel = connection.CreateModel())</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);</span><br><span class=\"line\">                   channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);</span><br><span class=\"line\">                   var consumer = new EventingBasicConsumer(channel);</span><br><span class=\"line\">                   consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       var message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                       Console.WriteLine(&quot;queue:&quot; + queueName);</span><br><span class=\"line\">                       Console.WriteLine(&quot;[x] Received &#123;0&#125;&quot;, message);</span><br><span class=\"line\">                       int len = int.Parse(message);                        </span><br><span class=\"line\">                       Console.WriteLine(&quot;Sleep:&#123;0&#125; seconds&quot;, len);</span><br><span class=\"line\">                       Thread.Sleep(len*1000);</span><br><span class=\"line\">                       Console.WriteLine(&quot; [x] Done&quot;);</span><br><span class=\"line\">                       channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually confirm message</span><br><span class=\"line\"></span><br><span class=\"line\">                   &#125;;</span><br><span class=\"line\">                   channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);</span><br><span class=\"line\">                   Console.WriteLine(&quot; Press [enter] to exit.&quot;);</span><br><span class=\"line\">                   Console.ReadLine();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure></p>\n<p>Retest this scenario we just tested:<br>Result:<br>    Consumer1:   </p>\n<img src=\"/2018/09/10/RabbitMQ-Task-distribution/Consumer1-1.png\" title=\"Consumer1-1\">\n<pre><code>Consumer2:\n</code></pre> <img src=\"/2018/09/10/RabbitMQ-Task-distribution/Consumer2-1.png\" title=\"Consumer2-1\">\n<p>Conclusion:</p>\n<p>The message will be distributed to which consumers depends on whether consumers are busy or not.</p>"},{"title":"Git Command","date":"2020-07-27T14:22:20.000Z","_content":"```\nmkdir mygit\ngit init\n****!!!\n111\n111\n","source":"_posts/test.md","raw":"---\ntitle: Git Command\ndate: 2020-07-27 22:22:20\ntags:\ncategories:\n  - Git\n\n---\n```\nmkdir mygit\ngit init\n****!!!\n111\n111\n","slug":"test","published":1,"updated":"2020-08-15T12:45:51.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdvqa0u0000btov4897s3adl","content":"<p><code>`</code><br>mkdir mygit<br>git init<br><em>**</em>!!!<br>111<br>111</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>mkdir mygit<br>git init<br><em>**</em>!!!<br>111<br>111</p>\n"},{"title":"RabbitMQ_message persistent-Durable queue(5)","author":"Kevin Zhou","date":"2018-09-07T09:13:00.000Z","_content":"Background:\nQueue message may miss once RabbitMQ restart or server crash. How can we handle this situation ?\n\n\nSolution:\n1.Declare a durable exchange \n2.Declare a durable queue\n3.Set Persistent to true when we publish message\n\nSend project code:\n```Csharp\nDurableQueueTest(args, \"DurableQueue\");\nstatic void DurableQueueTest(string[] args, string quename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    string exchangeName = \"DurableQueueTest\";\n                    string routingKey = \"DRK\";\n                    channel.ExchangeDeclare(exchangeName, ExchangeType.Direct, true, false, null);\n                    channel.QueueDeclare(queue: quename, durable: true, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueBind(quename, exchangeName, routingKey, null);\n                    var properties = channel.CreateBasicProperties();\n                    properties.Persistent = true;\n                    string message = args.Length > 0 ? exchangeName + \" \" + args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchangeName, routingKey, basicProperties: properties, body: body);\n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n```\n<!--more-->\n\nStep:\n1.Run the send project code\n ```\n dotnet run\n ```\n2.Check exchange and queue, you will find  both of them are druable.\n\n{% asset_img DurableExchange.png DurableExchange %}\n{% asset_img DurableQueue.png DurableQueue %}\n3.Send a persistent message and non-persistent message by Rabbitmq management\n\n{% asset_img Non-persistentMsg.png Non-persistentMsg %}\n{% asset_img persistentMsg.png persistentMsg %}\n{% asset_img QueueMsg.png QueueMsg %}\n\n4.Stop rabbitmq service to mock rabbitmq crash\n5.Restart rabbitmq service\n\n{% asset_img StopSartRMQ.png StopStartRMQ %}\n6.Check queue message from Rabbitmq management,You will find that persistent message still could be found in the queue,but another non-persistent message is missing\n\n{% asset_img queue.png queue %}\n{% asset_img msg.png msg %}","source":"_posts/RabbitMQ-message-persistent.md","raw":"title: RabbitMQ_message persistent-Durable queue(5)\nauthor: Kevin Zhou\ntags:\n  - RabbitMQ\n  - 'C#'\ncategories:\n  - RabbitMQ\ndate: 2018-09-07 17:13:00\n---\nBackground:\nQueue message may miss once RabbitMQ restart or server crash. How can we handle this situation ?\n\n\nSolution:\n1.Declare a durable exchange \n2.Declare a durable queue\n3.Set Persistent to true when we publish message\n\nSend project code:\n```Csharp\nDurableQueueTest(args, \"DurableQueue\");\nstatic void DurableQueueTest(string[] args, string quename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    string exchangeName = \"DurableQueueTest\";\n                    string routingKey = \"DRK\";\n                    channel.ExchangeDeclare(exchangeName, ExchangeType.Direct, true, false, null);\n                    channel.QueueDeclare(queue: quename, durable: true, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueBind(quename, exchangeName, routingKey, null);\n                    var properties = channel.CreateBasicProperties();\n                    properties.Persistent = true;\n                    string message = args.Length > 0 ? exchangeName + \" \" + args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchangeName, routingKey, basicProperties: properties, body: body);\n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n```\n<!--more-->\n\nStep:\n1.Run the send project code\n ```\n dotnet run\n ```\n2.Check exchange and queue, you will find  both of them are druable.\n\n{% asset_img DurableExchange.png DurableExchange %}\n{% asset_img DurableQueue.png DurableQueue %}\n3.Send a persistent message and non-persistent message by Rabbitmq management\n\n{% asset_img Non-persistentMsg.png Non-persistentMsg %}\n{% asset_img persistentMsg.png persistentMsg %}\n{% asset_img QueueMsg.png QueueMsg %}\n\n4.Stop rabbitmq service to mock rabbitmq crash\n5.Restart rabbitmq service\n\n{% asset_img StopSartRMQ.png StopStartRMQ %}\n6.Check queue message from Rabbitmq management,You will find that persistent message still could be found in the queue,but another non-persistent message is missing\n\n{% asset_img queue.png queue %}\n{% asset_img msg.png msg %}","slug":"RabbitMQ-message-persistent","published":1,"updated":"2020-08-15T12:45:51.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdvqa0u5000ftov4m5gi1n14","content":"<p>Background:<br>Queue message may miss once RabbitMQ restart or server crash. How can we handle this situation ?</p>\n<p>Solution:<br>1.Declare a durable exchange<br>2.Declare a durable queue<br>3.Set Persistent to true when we publish message</p>\n<p>Send project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DurableQueueTest(args, <span class=\"string\">\"DurableQueue\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DurableQueueTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> quename</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> exchangeName = <span class=\"string\">\"DurableQueueTest\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> routingKey = <span class=\"string\">\"DRK\"</span>;</span><br><span class=\"line\">                    channel.ExchangeDeclare(exchangeName, ExchangeType.Direct, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueDeclare(queue: quename, durable: <span class=\"literal\">true</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueBind(quename, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> properties = channel.CreateBasicProperties();</span><br><span class=\"line\">                    properties.Persistent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? exchangeName + <span class=\"string\">\" \"</span> + args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                    channel.BasicPublish(exchangeName, routingKey, basicProperties: properties, body: body);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>Step:<br>1.Run the send project code<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run</span><br></pre></td></tr></table></figure></p>\n<p>2.Check exchange and queue, you will find  both of them are druable.</p>\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/DurableExchange.png\" title=\"DurableExchange\">\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/DurableQueue.png\" title=\"DurableQueue\">\n<p>3.Send a persistent message and non-persistent message by Rabbitmq management</p>\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/Non-persistentMsg.png\" title=\"Non-persistentMsg\">\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/persistentMsg.png\" title=\"persistentMsg\">\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/QueueMsg.png\" title=\"QueueMsg\">\n<p>4.Stop rabbitmq service to mock rabbitmq crash<br>5.Restart rabbitmq service</p>\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/StopSartRMQ.png\" title=\"StopStartRMQ\">\n<p>6.Check queue message from Rabbitmq management,You will find that persistent message still could be found in the queue,but another non-persistent message is missing</p>\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/queue.png\" title=\"queue\">\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/msg.png\" title=\"msg\">","site":{"data":{}},"excerpt":"<p>Background:<br>Queue message may miss once RabbitMQ restart or server crash. How can we handle this situation ?</p>\n<p>Solution:<br>1.Declare a durable exchange<br>2.Declare a durable queue<br>3.Set Persistent to true when we publish message</p>\n<p>Send project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DurableQueueTest(args, <span class=\"string\">\"DurableQueue\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DurableQueueTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> quename</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> exchangeName = <span class=\"string\">\"DurableQueueTest\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> routingKey = <span class=\"string\">\"DRK\"</span>;</span><br><span class=\"line\">                    channel.ExchangeDeclare(exchangeName, ExchangeType.Direct, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueDeclare(queue: quename, durable: <span class=\"literal\">true</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueBind(quename, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> properties = channel.CreateBasicProperties();</span><br><span class=\"line\">                    properties.Persistent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? exchangeName + <span class=\"string\">\" \"</span> + args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                    channel.BasicPublish(exchangeName, routingKey, basicProperties: properties, body: body);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>Step:<br>1.Run the send project code<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run</span><br></pre></td></tr></table></figure></p>\n<p>2.Check exchange and queue, you will find  both of them are druable.</p>\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/DurableExchange.png\" title=\"DurableExchange\">\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/DurableQueue.png\" title=\"DurableQueue\">\n<p>3.Send a persistent message and non-persistent message by Rabbitmq management</p>\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/Non-persistentMsg.png\" title=\"Non-persistentMsg\">\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/persistentMsg.png\" title=\"persistentMsg\">\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/QueueMsg.png\" title=\"QueueMsg\">\n<p>4.Stop rabbitmq service to mock rabbitmq crash<br>5.Restart rabbitmq service</p>\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/StopSartRMQ.png\" title=\"StopStartRMQ\">\n<p>6.Check queue message from Rabbitmq management,You will find that persistent message still could be found in the queue,but another non-persistent message is missing</p>\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/queue.png\" title=\"queue\">\n<img src=\"/2018/09/07/RabbitMQ-message-persistent/msg.png\" title=\"msg\">"},{"title":"RabbitMQ_ExchangeType Direct(2)","author":"Kevin Zhou","date":"2018-08-29T14:22:00.000Z","_content":"## DirectExchangeTest\nExchange: Exchange is a rout map\nExchangeType: Direct, the message will be pushed to specified queue which have binded with the exchange.\n1.Send project code:\n```Csharp\n DirectExchangeTest(args, \"DirectTestQueue\");\nstatic void DirectExchangeTest(string[] args,string quename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    string exchangeName = \"DirectTest\";\n                    string routingKey = \"DirectRK\";\n                    channel.ExchangeDeclare(exchangeName,ExchangeType.Direct,false,false,null);\n                    channel.QueueDeclare(queue: \"DirectTestQueue\", durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueBind(quename, exchangeName, routingKey, null);\n                    string message = args.Length > 0 ? exchangeName+\" \"+args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchangeName,routingKey, basicProperties: null, body: body);\n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n  ```\n 2.Receive project code:\n ```Csharp\n  ConsumeMsg(args, \"DirectTestQueue\");\n ```\n <!--more-->\n 3.Run command for send project\n \n {% asset_img DirectSend.png This is an image %}\n \n 4.Run command for receive project\n \n \n {% asset_img DirctReceive.png This is an image %}\n 5.Check Exchange and queue\n  {% asset_img DirctExchange.png This is an image %}\n \n {% asset_img image.png This is an image %}\n6. Publish a meesage via RabbitMQ management,  You will find the message can't be  published if the routingkey is not equal with \"DirectRK\"\n{% asset_img error.png This is an image %}\n","source":"_posts/abbitMQ-ExchangeType-Direct.md","raw":"title: RabbitMQ_ExchangeType Direct(2)\nauthor: Kevin Zhou\ntags:\n  - RabbitMQ\n  - 'C#'\ncategories:\n  - RabbitMQ\ndate: 2018-08-29 22:22:00\n---\n## DirectExchangeTest\nExchange: Exchange is a rout map\nExchangeType: Direct, the message will be pushed to specified queue which have binded with the exchange.\n1.Send project code:\n```Csharp\n DirectExchangeTest(args, \"DirectTestQueue\");\nstatic void DirectExchangeTest(string[] args,string quename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    string exchangeName = \"DirectTest\";\n                    string routingKey = \"DirectRK\";\n                    channel.ExchangeDeclare(exchangeName,ExchangeType.Direct,false,false,null);\n                    channel.QueueDeclare(queue: \"DirectTestQueue\", durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueBind(quename, exchangeName, routingKey, null);\n                    string message = args.Length > 0 ? exchangeName+\" \"+args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchangeName,routingKey, basicProperties: null, body: body);\n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n  ```\n 2.Receive project code:\n ```Csharp\n  ConsumeMsg(args, \"DirectTestQueue\");\n ```\n <!--more-->\n 3.Run command for send project\n \n {% asset_img DirectSend.png This is an image %}\n \n 4.Run command for receive project\n \n \n {% asset_img DirctReceive.png This is an image %}\n 5.Check Exchange and queue\n  {% asset_img DirctExchange.png This is an image %}\n \n {% asset_img image.png This is an image %}\n6. Publish a meesage via RabbitMQ management,  You will find the message can't be  published if the routingkey is not equal with \"DirectRK\"\n{% asset_img error.png This is an image %}\n","slug":"abbitMQ-ExchangeType-Direct","published":1,"updated":"2020-08-15T12:45:51.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdvqa0u9000itov4kyasqe35","content":"<h2 id=\"DirectExchangeTest\"><a href=\"#DirectExchangeTest\" class=\"headerlink\" title=\"DirectExchangeTest\"></a>DirectExchangeTest</h2><p>Exchange: Exchange is a rout map<br>ExchangeType: Direct, the message will be pushed to specified queue which have binded with the exchange.<br>1.Send project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> DirectExchangeTest(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DirectExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args,<span class=\"keyword\">string</span> quename</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> exchangeName = <span class=\"string\">\"DirectTest\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> routingKey = <span class=\"string\">\"DirectRK\"</span>;</span><br><span class=\"line\">                    channel.ExchangeDeclare(exchangeName,ExchangeType.Direct,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueDeclare(queue: <span class=\"string\">\"DirectTestQueue\"</span>, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueBind(quename, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? exchangeName+<span class=\"string\">\" \"</span>+args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                    channel.BasicPublish(exchangeName,routingKey, basicProperties: <span class=\"literal\">null</span>, body: body);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p> 2.Receive project code:<br> <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br></pre></td></tr></table></figure></p>\n <a id=\"more\"></a>\n<p> 3.Run command for send project</p>\n <img src=\"/2018/08/29/abbitMQ-ExchangeType-Direct/DirectSend.png\" title=\"This is an image\">\n<p> 4.Run command for receive project</p>\n <img src=\"/2018/08/29/abbitMQ-ExchangeType-Direct/DirctReceive.png\" title=\"This is an image\">\n<p> 5.Check Exchange and queue<br>  <img src=\"/2018/08/29/abbitMQ-ExchangeType-Direct/DirctExchange.png\" title=\"This is an image\"></p>\n <img src=\"/2018/08/29/abbitMQ-ExchangeType-Direct/image.png\" title=\"This is an image\">\n<ol start=\"6\">\n<li>Publish a meesage via RabbitMQ management,  You will find the message can’t be  published if the routingkey is not equal with “DirectRK”<img src=\"/2018/08/29/abbitMQ-ExchangeType-Direct/error.png\" title=\"This is an image\">\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"DirectExchangeTest\"><a href=\"#DirectExchangeTest\" class=\"headerlink\" title=\"DirectExchangeTest\"></a>DirectExchangeTest</h2><p>Exchange: Exchange is a rout map<br>ExchangeType: Direct, the message will be pushed to specified queue which have binded with the exchange.<br>1.Send project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> DirectExchangeTest(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DirectExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args,<span class=\"keyword\">string</span> quename</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> exchangeName = <span class=\"string\">\"DirectTest\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> routingKey = <span class=\"string\">\"DirectRK\"</span>;</span><br><span class=\"line\">                    channel.ExchangeDeclare(exchangeName,ExchangeType.Direct,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueDeclare(queue: <span class=\"string\">\"DirectTestQueue\"</span>, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueBind(quename, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? exchangeName+<span class=\"string\">\" \"</span>+args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                    channel.BasicPublish(exchangeName,routingKey, basicProperties: <span class=\"literal\">null</span>, body: body);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p> 2.Receive project code:<br> <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br></pre></td></tr></table></figure></p>","more":"<p> 3.Run command for send project</p>\n <img src=\"/2018/08/29/abbitMQ-ExchangeType-Direct/DirectSend.png\" title=\"This is an image\">\n<p> 4.Run command for receive project</p>\n <img src=\"/2018/08/29/abbitMQ-ExchangeType-Direct/DirctReceive.png\" title=\"This is an image\">\n<p> 5.Check Exchange and queue<br>  <img src=\"/2018/08/29/abbitMQ-ExchangeType-Direct/DirctExchange.png\" title=\"This is an image\"></p>\n <img src=\"/2018/08/29/abbitMQ-ExchangeType-Direct/image.png\" title=\"This is an image\">\n<ol start=\"6\">\n<li>Publish a meesage via RabbitMQ management,  You will find the message can’t be  published if the routingkey is not equal with “DirectRK”<img src=\"/2018/08/29/abbitMQ-ExchangeType-Direct/error.png\" title=\"This is an image\">\n</li>\n</ol>"}],"PostAsset":[{"_id":"source/_posts/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/command.png","slug":"command.png","post":"ckdvqa0tc0001tov4aaug3f1c","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/queue.png","slug":"queue.png","post":"ckdvqa0tc0001tov4aaug3f1c","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-Consumer-Acknowledgements-and-Publisher-Confirms-6/queue1.png","slug":"queue1.png","post":"ckdvqa0tc0001tov4aaug3f1c","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-ExchangeType-Topic-4/RMQpng.png","slug":"RMQpng.png","post":"ckdvqa0tk0003tov4fbv585hl","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-ExchangeType-Topic-4/Send.png","slug":"Send.png","post":"ckdvqa0tk0003tov4fbv585hl","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-ExchangeType-Topic-4/receive.png","slug":"receive.png","post":"ckdvqa0tk0003tov4fbv585hl","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-No-Exchange-1/NoExchangeQueue.png","slug":"NoExchangeQueue.png","post":"ckdvqa0tr0006tov46f5hr687","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-No-Exchange-1/pasted-0.png","slug":"pasted-0.png","post":"ckdvqa0tr0006tov46f5hr687","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-No-Exchange-1/pasted-1.png","slug":"pasted-1.png","post":"ckdvqa0tr0006tov46f5hr687","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-ExchangeType-Fanout-3/FanOutExchange.png","slug":"FanOutExchange.png","post":"ckdvqa0to0005tov40xv5tsc9","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-ExchangeType-Fanout-3/Queue.png","slug":"Queue.png","post":"ckdvqa0to0005tov40xv5tsc9","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-ExchangeType-Fanout-3/Receivecmd.png","slug":"Receivecmd.png","post":"ckdvqa0to0005tov40xv5tsc9","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-ExchangeType-Fanout-3/Sendcmd.png","slug":"Sendcmd.png","post":"ckdvqa0to0005tov40xv5tsc9","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-Task-distribution/Consumer1-1.png","slug":"Consumer1-1.png","post":"ckdvqa0tv0008tov4xoo9hlx4","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-Task-distribution/Consumer2-1.png","slug":"Consumer2-1.png","post":"ckdvqa0tv0008tov4xoo9hlx4","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-Task-distribution/Consumer2.png","slug":"Consumer2.png","post":"ckdvqa0tv0008tov4xoo9hlx4","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-Task-distribution/consumer1.png","slug":"consumer1.png","post":"ckdvqa0tv0008tov4xoo9hlx4","modified":0,"renderable":0},{"_id":"source/_posts/abbitMQ-ExchangeType-Direct/DirctExchange.png","slug":"DirctExchange.png","post":"ckdvqa0u9000itov4kyasqe35","modified":0,"renderable":0},{"_id":"source/_posts/abbitMQ-ExchangeType-Direct/DirctReceive.png","slug":"DirctReceive.png","post":"ckdvqa0u9000itov4kyasqe35","modified":0,"renderable":0},{"_id":"source/_posts/abbitMQ-ExchangeType-Direct/DirectSend.png","slug":"DirectSend.png","post":"ckdvqa0u9000itov4kyasqe35","modified":0,"renderable":0},{"_id":"source/_posts/abbitMQ-ExchangeType-Direct/error.png","slug":"error.png","post":"ckdvqa0u9000itov4kyasqe35","modified":0,"renderable":0},{"_id":"source/_posts/abbitMQ-ExchangeType-Direct/image.png","slug":"image.png","post":"ckdvqa0u9000itov4kyasqe35","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-message-persistent/DurableExchange.png","slug":"DurableExchange.png","post":"ckdvqa0u5000ftov4m5gi1n14","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-message-persistent/DurableQueue.png","slug":"DurableQueue.png","post":"ckdvqa0u5000ftov4m5gi1n14","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-message-persistent/Non-persistentMsg.png","slug":"Non-persistentMsg.png","post":"ckdvqa0u5000ftov4m5gi1n14","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-message-persistent/QueueMsg.png","slug":"QueueMsg.png","post":"ckdvqa0u5000ftov4m5gi1n14","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-message-persistent/StopSartRMQ.png","slug":"StopSartRMQ.png","post":"ckdvqa0u5000ftov4m5gi1n14","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-message-persistent/msg.png","slug":"msg.png","post":"ckdvqa0u5000ftov4m5gi1n14","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-message-persistent/persistentMsg.png","slug":"persistentMsg.png","post":"ckdvqa0u5000ftov4m5gi1n14","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ-message-persistent/queue.png","slug":"queue.png","post":"ckdvqa0u5000ftov4m5gi1n14","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckdvqa0t60000tov4sspt6pdk","category_id":"ckdvqa0tg0002tov45c9iwvm9","_id":"ckdvqa0u2000ctov4li0kc2rq"},{"post_id":"ckdvqa0tv0008tov4xoo9hlx4","category_id":"ckdvqa0tt0007tov4hwpd0msp","_id":"ckdvqa0ub000jtov48cmwxj5l"},{"post_id":"ckdvqa0tc0001tov4aaug3f1c","category_id":"ckdvqa0tt0007tov4hwpd0msp","_id":"ckdvqa0ue000mtov4tnj5beup"},{"post_id":"ckdvqa0u0000btov4897s3adl","category_id":"ckdvqa0tg0002tov45c9iwvm9","_id":"ckdvqa0ug000otov4g7fur1ev"},{"post_id":"ckdvqa0u5000ftov4m5gi1n14","category_id":"ckdvqa0tt0007tov4hwpd0msp","_id":"ckdvqa0uk000rtov4udysdo28"},{"post_id":"ckdvqa0tk0003tov4fbv585hl","category_id":"ckdvqa0tt0007tov4hwpd0msp","_id":"ckdvqa0ul000ttov4byz40y3i"},{"post_id":"ckdvqa0u9000itov4kyasqe35","category_id":"ckdvqa0tt0007tov4hwpd0msp","_id":"ckdvqa0um000vtov4tlww4fp2"},{"post_id":"ckdvqa0to0005tov40xv5tsc9","category_id":"ckdvqa0tt0007tov4hwpd0msp","_id":"ckdvqa0un000xtov4a3klm538"},{"post_id":"ckdvqa0tr0006tov46f5hr687","category_id":"ckdvqa0tt0007tov4hwpd0msp","_id":"ckdvqa0uo000ztov4g1il1prv"},{"post_id":"cjlenmyfp0001z0okgawjas0b","category_id":"ckdvqa1200016tov4yibl0cc7","_id":"ckdvqa127001atov42wch6cf3"}],"PostTag":[{"post_id":"cjlenmyfp0001z0okgawjas0b","tag_id":"cjlenmyfu0003z0oke2t696gt","_id":"cjlenmyg70008z0okbp6r3u5m"},{"post_id":"ckdvqa0tr0006tov46f5hr687","tag_id":"cjlenmyg60007z0oklucsivb3","_id":"ckdvqa0u0000atov4lj948220"},{"post_id":"ckdvqa0tr0006tov46f5hr687","tag_id":"ckdvqa0tn0004tov439p4bzhj","_id":"ckdvqa0u4000etov4p92mzyhn"},{"post_id":"ckdvqa0tc0001tov4aaug3f1c","tag_id":"cjlenmyg60007z0oklucsivb3","_id":"ckdvqa0u8000htov4xxdsmzt8"},{"post_id":"ckdvqa0tc0001tov4aaug3f1c","tag_id":"ckdvqa0tn0004tov439p4bzhj","_id":"ckdvqa0ud000ltov4uif4ssqt"},{"post_id":"ckdvqa0tv0008tov4xoo9hlx4","tag_id":"cjlenmyg60007z0oklucsivb3","_id":"ckdvqa0uf000ntov41vx481lw"},{"post_id":"ckdvqa0tv0008tov4xoo9hlx4","tag_id":"ckdvqa0tn0004tov439p4bzhj","_id":"ckdvqa0uj000qtov4mfm3jdmz"},{"post_id":"ckdvqa0tk0003tov4fbv585hl","tag_id":"cjlenmyg60007z0oklucsivb3","_id":"ckdvqa0uk000stov4y02dnmww"},{"post_id":"ckdvqa0tk0003tov4fbv585hl","tag_id":"ckdvqa0tn0004tov439p4bzhj","_id":"ckdvqa0um000utov4ge950xvg"},{"post_id":"ckdvqa0u5000ftov4m5gi1n14","tag_id":"cjlenmyg60007z0oklucsivb3","_id":"ckdvqa0un000wtov4c0imy7ld"},{"post_id":"ckdvqa0u5000ftov4m5gi1n14","tag_id":"ckdvqa0tn0004tov439p4bzhj","_id":"ckdvqa0uo000ytov4ofkxgs5g"},{"post_id":"ckdvqa0u9000itov4kyasqe35","tag_id":"cjlenmyg60007z0oklucsivb3","_id":"ckdvqa0up0010tov4e0qt8lgc"},{"post_id":"ckdvqa0u9000itov4kyasqe35","tag_id":"ckdvqa0tn0004tov439p4bzhj","_id":"ckdvqa0up0011tov480ud7awp"},{"post_id":"ckdvqa0to0005tov40xv5tsc9","tag_id":"cjlenmyg60007z0oklucsivb3","_id":"ckdvqa0uq0012tov4a07yh27z"},{"post_id":"ckdvqa0to0005tov40xv5tsc9","tag_id":"ckdvqa0tn0004tov439p4bzhj","_id":"ckdvqa0uq0013tov4uhjhdxuw"},{"post_id":"cjlenmyfp0001z0okgawjas0b","tag_id":"ckdvqa1210017tov4cvdkyrw3","_id":"ckdvqa1260019tov4pgjp7it8"}],"Tag":[{"name":"Python","_id":"cjlenmyfu0003z0oke2t696gt"},{"name":"RabbitMQ","_id":"cjlenmyg60007z0oklucsivb3"},{"name":"C#","_id":"ckdvqa0tn0004tov439p4bzhj"},{"name":"爬虫","_id":"ckdvqa1210017tov4cvdkyrw3"}]}}