{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/DirectSend.png","path":"images/DirectSend.png","modified":0,"renderable":0},{"_id":"source/images/DirctExchange.png","path":"images/DirctExchange.png","modified":0,"renderable":0},{"_id":"source/images/DirctReceive.png","path":"images/DirctReceive.png","modified":0,"renderable":0},{"_id":"source/images/error.png","path":"images/error.png","modified":0,"renderable":0},{"_id":"source/images/NoExchangeQueue.png","path":"images/NoExchangeQueue.png","modified":0,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":0,"renderable":0},{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":0,"renderable":0},{"_id":"source/images/image.png","path":"images/image.png","modified":0,"renderable":0},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/pasted-5.png","path":"images/pasted-5.png","modified":0,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":0,"renderable":0},{"_id":"source/images/pasted-4.png","path":"images/pasted-4.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1534731648484},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1534731648501},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1534731648751},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1534731648497},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1534731648488},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1534731648506},{"_id":"source/_posts/Python爬虫.md","hash":"d743c7135e085033cd02d5f8f84c0e00a7710a3c","modified":1535513277614},{"_id":"source/_posts/RabbitMQ-No-Exchange-二-1.md","hash":"94670b51d4e16ea9eb7442e5dec4d1c323a4f2dd","modified":1535513704101},{"_id":"source/_posts/RabbitMQ.md","hash":"6d1ad36e9c9675553865c6fd08ca1b2ee2381c2c","modified":1535511793344},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1534731599279},{"_id":"source/_posts/testImage.md","hash":"ee7cb824fef4a727f1308e932404017d96d47d3a","modified":1535521283607},{"_id":"source/images/DirectSend.png","hash":"d163b87c8e0f067d77d76da77766c8da16750f5e","modified":1535512644982},{"_id":"source/images/DirctExchange.png","hash":"596d0664cf511547b82047b8cd379494c5fee8a1","modified":1535512814823},{"_id":"source/images/DirctReceive.png","hash":"5e31890c0735597fd87b9474d11b94ccd19a16d5","modified":1535512699674},{"_id":"source/images/error.png","hash":"41bbf94ddd0e8ea35c4e68877a299304c959097a","modified":1535513055844},{"_id":"source/images/NoExchangeQueue.png","hash":"bfc7eff5a934a63ed78a277f74d53d756f0c38e7","modified":1535511769588},{"_id":"source/images/pasted-0.png","hash":"9e76ac47d3eef5faf80ad207e15493134a35c928","modified":1535509874648},{"_id":"source/_drafts/RabbitMQ-No-Exchange-二.md","hash":"29eea5d170f78ee7e47e0980ef9de397380f4e5c","modified":1535512058380},{"_id":"source/images/pasted-2.png","hash":"bfc7eff5a934a63ed78a277f74d53d756f0c38e7","modified":1535511726327},{"_id":"source/images/image.png","hash":"f0e814c6ef6966e0cbbc05e2ce1b016e0a5c6e5e","modified":1535512850642},{"_id":"source/images/pasted-1.png","hash":"397830f6916fd16dcd0a33e70eeec0e6902edb0a","modified":1535509906611},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1534731648514},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1534731648518},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1534731648523},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1534731648538},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1534731648533},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1534731648528},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1534731648758},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1534731648560},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1534731648553},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1534731648543},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1534731648548},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1534731648569},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1534731648565},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1534731648733},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1534731648719},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534731648743},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1534731648727},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534731648738},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1534731648747},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1534731648723},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1534731648590},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1534731648594},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1534731648617},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1534731648603},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1534731648629},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1534731648646},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1534731648623},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1534731648581},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1534731648684},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1534731648634},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1534731648709},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1534731648697},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1534731648640},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1534731648691},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1534731648775},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1534731648715},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1534731649024},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1534731648705},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1534731649008},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1534731649054},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1534731649071},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1534731649049},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1534731648899},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1534731649081},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1534731649035},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1534731649198},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1534731649216},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1534731649270},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1534731649246},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1534731648660},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1534731648653},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1534731648665},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1534731648675},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1534731648670},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1534731648802},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1534731648679},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1534731648784},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1534731648817},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1534731648855},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1534731648794},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1534731648837},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1534731648849},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1534731648873},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1534731648861},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1534731648887},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1534731648867},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1534731648880},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1534731648908},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1534731649096},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1534731648981},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1534731649113},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1534731649165},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1534731649100},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1534731648924},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1534731648974},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1534731649177},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1534731649144},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1534731648997},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1534731648951},{"_id":"source/_discarded/testImage.md","hash":"a6434dd28c69edb1bebb521fab252ff31ab54596","modified":1535520085672},{"_id":"source/_discarded/testImages2-1.md","hash":"8c96806189a4762a3cc9f2e152db3ef2c295954f","modified":1535519985801},{"_id":"source/_discarded/testImages2-2.md","hash":"d8daf35e22e4e0bb325ecdb66d4ac24004262833","modified":1535519981982},{"_id":"source/_discarded/testImages2.md","hash":"53bdfee555713a2043839a42cf32ffba2de446f9","modified":1535519989675},{"_id":"source/_discarded/testImagesa-1.md","hash":"a2c03d637bfa7219382fa03ff2b93aca49139bc7","modified":1535519951136},{"_id":"source/_discarded/testImagesa.md","hash":"de8d3aea218ea955aa77ab37906e90676cf5c03e","modified":1535519978771},{"_id":"source/images/pasted-5.png","hash":"09115df1a204c95cfa6436c147a27d8bf5bd7d9a","modified":1535517992484},{"_id":"source/images/pasted-3.png","hash":"2fe6c27f33e5946e09b55eab6be80516c6939793","modified":1535517821798},{"_id":"source/images/pasted-4.png","hash":"2fe6c27f33e5946e09b55eab6be80516c6939793","modified":1535517847549},{"_id":"source/_drafts/testImage.md","hash":"ee7cb824fef4a727f1308e932404017d96d47d3a","modified":1535521284672},{"_id":"source/_posts/testImage/image.png","hash":"0bdb9ac4253c7bb22867cf0b33a8f38d26375651","modified":1535520969126},{"_id":"source/_drafts/testImage/image.png","hash":"0bdb9ac4253c7bb22867cf0b33a8f38d26375651","modified":1535521284700},{"_id":"source/_posts/estImage.md","hash":"ee7cb824fef4a727f1308e932404017d96d47d3a","modified":1535521295848},{"_id":"source/_posts/stImage.md","hash":"12475a98373a7b31d48b3c06cac7d5e9b93e00ab","modified":1535521305413},{"_id":"source/_posts/tImage.md","hash":"12475a98373a7b31d48b3c06cac7d5e9b93e00ab","modified":1535521310027},{"_id":"source/_posts/Image.md","hash":"12475a98373a7b31d48b3c06cac7d5e9b93e00ab","modified":1535521310229}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"RabbitMQ_ExchangeType Direct (二)","author":"Kevin Zhou","date":"2018-08-29T03:07:47.000Z","_content":"## DirectExchangeTest\nExchange: Exchange is a rout map\nExchangeType: Direct, the message will be pushed to specified queue which have binded with the exchange.\n1.Send project code:\n```Csharp\n DirectExchangeTest(args, \"DirectTestQueue\");\nstatic void DirectExchangeTest(string[] args,string quename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    string exchangeName = \"DirectTest\";\n                    string routingKey = \"DirectRK\";\n                    channel.ExchangeDeclare(exchangeName,ExchangeType.Direct,false,false,null);\n                    channel.QueueDeclare(queue: \"DirectTestQueue\", durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueBind(quename, exchangeName, routingKey, null);\n                    string message = args.Length > 0 ? exchangeName+\" \"+args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchangeName,routingKey, basicProperties: null, body: body);\n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n  ```\n 2.Receive project code:\n ```Csharp\n  ConsumeMsg(args, \"DirectTestQueue\");\n ```\n <!--more-->\n 3.Run command for send project\n \n![upload successful](/images/DirectSend.png)\n 4.Run command for receive project\n \n![upload successful](/images/DirctReceive.png)\n 5.Check Exchange and queue\n \n![upload successful](/images/DirctExchange.png)\n \n![upload successful](/images/image.png)\n6. Publish a meesage via RabbitMQ management,  You will find the message can't be  published if the routingkey is not equal with \"DirectRK\"\n\n![upload successful](/images/error.png)","source":"_posts/RabbitMQ-No-Exchange-二-1.md","raw":"title: RabbitMQ_ExchangeType Direct (二)\nauthor: Kevin Zhou\ndate: 2018-08-29 11:07:47\ntags:\n---\n## DirectExchangeTest\nExchange: Exchange is a rout map\nExchangeType: Direct, the message will be pushed to specified queue which have binded with the exchange.\n1.Send project code:\n```Csharp\n DirectExchangeTest(args, \"DirectTestQueue\");\nstatic void DirectExchangeTest(string[] args,string quename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    string exchangeName = \"DirectTest\";\n                    string routingKey = \"DirectRK\";\n                    channel.ExchangeDeclare(exchangeName,ExchangeType.Direct,false,false,null);\n                    channel.QueueDeclare(queue: \"DirectTestQueue\", durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    channel.QueueBind(quename, exchangeName, routingKey, null);\n                    string message = args.Length > 0 ? exchangeName+\" \"+args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchangeName,routingKey, basicProperties: null, body: body);\n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n  ```\n 2.Receive project code:\n ```Csharp\n  ConsumeMsg(args, \"DirectTestQueue\");\n ```\n <!--more-->\n 3.Run command for send project\n \n![upload successful](/images/DirectSend.png)\n 4.Run command for receive project\n \n![upload successful](/images/DirctReceive.png)\n 5.Check Exchange and queue\n \n![upload successful](/images/DirctExchange.png)\n \n![upload successful](/images/image.png)\n6. Publish a meesage via RabbitMQ management,  You will find the message can't be  published if the routingkey is not equal with \"DirectRK\"\n\n![upload successful](/images/error.png)","slug":"RabbitMQ-No-Exchange-二-1","published":1,"updated":"2018-08-29T03:35:04.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlenmyfb0000z0okimvnxu1v","content":"<h2 id=\"DirectExchangeTest\"><a href=\"#DirectExchangeTest\" class=\"headerlink\" title=\"DirectExchangeTest\"></a>DirectExchangeTest</h2><p>Exchange: Exchange is a rout map<br>ExchangeType: Direct, the message will be pushed to specified queue which have binded with the exchange.<br>1.Send project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> DirectExchangeTest(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DirectExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args,<span class=\"keyword\">string</span> quename</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> exchangeName = <span class=\"string\">\"DirectTest\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> routingKey = <span class=\"string\">\"DirectRK\"</span>;</span><br><span class=\"line\">                    channel.ExchangeDeclare(exchangeName,ExchangeType.Direct,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueDeclare(queue: <span class=\"string\">\"DirectTestQueue\"</span>, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueBind(quename, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? exchangeName+<span class=\"string\">\" \"</span>+args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                    channel.BasicPublish(exchangeName,routingKey, basicProperties: <span class=\"literal\">null</span>, body: body);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p> 2.Receive project code:<br> <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br></pre></td></tr></table></figure></p>\n <a id=\"more\"></a>\n<p> 3.Run command for send project</p>\n<p><img src=\"/images/DirectSend.png\" alt=\"upload successful\"><br> 4.Run command for receive project</p>\n<p><img src=\"/images/DirctReceive.png\" alt=\"upload successful\"><br> 5.Check Exchange and queue</p>\n<p><img src=\"/images/DirctExchange.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/image.png\" alt=\"upload successful\"></p>\n<ol start=\"6\">\n<li>Publish a meesage via RabbitMQ management,  You will find the message can’t be  published if the routingkey is not equal with “DirectRK”</li>\n</ol>\n<p><img src=\"/images/error.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"DirectExchangeTest\"><a href=\"#DirectExchangeTest\" class=\"headerlink\" title=\"DirectExchangeTest\"></a>DirectExchangeTest</h2><p>Exchange: Exchange is a rout map<br>ExchangeType: Direct, the message will be pushed to specified queue which have binded with the exchange.<br>1.Send project code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> DirectExchangeTest(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DirectExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args,<span class=\"keyword\">string</span> quename</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> exchangeName = <span class=\"string\">\"DirectTest\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> routingKey = <span class=\"string\">\"DirectRK\"</span>;</span><br><span class=\"line\">                    channel.ExchangeDeclare(exchangeName,ExchangeType.Direct,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueDeclare(queue: <span class=\"string\">\"DirectTestQueue\"</span>, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    channel.QueueBind(quename, exchangeName, routingKey, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? exchangeName+<span class=\"string\">\" \"</span>+args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                    channel.BasicPublish(exchangeName,routingKey, basicProperties: <span class=\"literal\">null</span>, body: body);</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p> 2.Receive project code:<br> <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConsumeMsg(args, <span class=\"string\">\"DirectTestQueue\"</span>);</span><br></pre></td></tr></table></figure></p>","more":"<p> 3.Run command for send project</p>\n<p><img src=\"/images/DirectSend.png\" alt=\"upload successful\"><br> 4.Run command for receive project</p>\n<p><img src=\"/images/DirctReceive.png\" alt=\"upload successful\"><br> 5.Check Exchange and queue</p>\n<p><img src=\"/images/DirctExchange.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/image.png\" alt=\"upload successful\"></p>\n<ol start=\"6\">\n<li>Publish a meesage via RabbitMQ management,  You will find the message can’t be  published if the routingkey is not equal with “DirectRK”</li>\n</ol>\n<p><img src=\"/images/error.png\" alt=\"upload successful\"></p>"},{"title":"Python爬虫","author":"Kevin Zhou","date":"2018-08-20T14:12:00.000Z","_content":"### 如何使用requests登录豆瓣并且爬取内容\nNote:\n1.如果登录之后要去其他页面查看相关内容得记录session\n```python\n   s=requests.session()\n  r = s.post(loginUrl, data=formData, headers=headers\n  res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)\n```\n2.r.history可以记录login之后的302 status\n<!--more-->\nCode:\n```python\n# -*- encoding:utf-8 -*-  \n##############################  \n__author__ = \"KevinZhou\"\n__date__ = \"2017/7/23\"\n###############################  \n\nimport requests\nfrom bs4 import BeautifulSoup\nimport urllib.request\nimport re\n\nloginUrl = 'https://accounts.douban.com/login'\nformData = {\n    \"redir\": \"http://movie.douban.com/mine\",\n    \"form_email\": \"******\",\n    \"form_password\": \"******\",\n    \"login\": u'登录',\n    \"source\":\"index_nav\"\n}\nheaders = {'user-agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}\n\nr = requests.post(loginUrl, data=formData, headers=headers)\npage = r.text\nprint (r.url)\n\n'''''获取验证码图片'''\n# 利用bs4获取captcha地址\nsoup = BeautifulSoup(page, \"html.parser\")\ncaptchaAddr = soup.find('img', id='captcha_image')['src']\n# 利用正则表达式获取captcha的ID\n# reCaptchaID = r'<input type=\"hidden\" name=\"captcha-id\" value=\"(.*?)\"/'\n# captchaID = re.findall(reCaptchaID, page)\n\n# htm=requests.get(\"https://accounts.douban.com/login\")\n#print(htm.content.decode('utf-8'))\na=soup.find(\"img\",class_=\"captcha_image\")\nprint(a.attrs['src'])\npattern = re.compile(r'id=(\\w*)(\\W)en&size=(\\w*)$')\nmatch=pattern.search(a.attrs['src'])\nif match:\n    captchaID=match.group()[3:][:-7]\n    print(captchaID)\n\n# print captchaID\n# 保存到本地\nurllib.request.urlretrieve(captchaAddr,\"captcha.jpg\")\ncaptcha = input('please input the captcha:')\n\nformData['captcha-solution'] = captcha\nformData['captcha-id'] = captchaID\ns=requests.session()\nr = s.post(loginUrl, data=formData, headers=headers)\n\npage = r.text\nprint(r.url)\nprint(r.history)\n# print(r.cookies)\n# print(r.content.decode('utf-8'))\n# res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)\n#print(res.content.decode('utf-8'))\nif r.url == 'https://movie.douban.com/mine':\n    print('Login successfully!!!')\nprint\n'我看过的电影', '-' * 60\n# 获取看过的电影\nsoup = BeautifulSoup(page, \"html.parser\")\nresult = soup.findAll('li')\nfor item in result:\n    s=item.find('a', class_=\"cover\")\n    if s is not None:\n        # print(s)\n        print(s.get(\"href\"))\n        print(s.img[\"alt\"])\n        # for img in  s:\n        #     print(img[\"alt\"])\n        #     print(img.alt)\n\nelse:\n    print\n\"failed!\"\n```","source":"_posts/Python爬虫.md","raw":"title: Python爬虫\nauthor: Kevin Zhou\ntags:\n  - Python\ncategories: []\ndate: 2018-08-20 22:12:00\n---\n### 如何使用requests登录豆瓣并且爬取内容\nNote:\n1.如果登录之后要去其他页面查看相关内容得记录session\n```python\n   s=requests.session()\n  r = s.post(loginUrl, data=formData, headers=headers\n  res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)\n```\n2.r.history可以记录login之后的302 status\n<!--more-->\nCode:\n```python\n# -*- encoding:utf-8 -*-  \n##############################  \n__author__ = \"KevinZhou\"\n__date__ = \"2017/7/23\"\n###############################  \n\nimport requests\nfrom bs4 import BeautifulSoup\nimport urllib.request\nimport re\n\nloginUrl = 'https://accounts.douban.com/login'\nformData = {\n    \"redir\": \"http://movie.douban.com/mine\",\n    \"form_email\": \"******\",\n    \"form_password\": \"******\",\n    \"login\": u'登录',\n    \"source\":\"index_nav\"\n}\nheaders = {'user-agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}\n\nr = requests.post(loginUrl, data=formData, headers=headers)\npage = r.text\nprint (r.url)\n\n'''''获取验证码图片'''\n# 利用bs4获取captcha地址\nsoup = BeautifulSoup(page, \"html.parser\")\ncaptchaAddr = soup.find('img', id='captcha_image')['src']\n# 利用正则表达式获取captcha的ID\n# reCaptchaID = r'<input type=\"hidden\" name=\"captcha-id\" value=\"(.*?)\"/'\n# captchaID = re.findall(reCaptchaID, page)\n\n# htm=requests.get(\"https://accounts.douban.com/login\")\n#print(htm.content.decode('utf-8'))\na=soup.find(\"img\",class_=\"captcha_image\")\nprint(a.attrs['src'])\npattern = re.compile(r'id=(\\w*)(\\W)en&size=(\\w*)$')\nmatch=pattern.search(a.attrs['src'])\nif match:\n    captchaID=match.group()[3:][:-7]\n    print(captchaID)\n\n# print captchaID\n# 保存到本地\nurllib.request.urlretrieve(captchaAddr,\"captcha.jpg\")\ncaptcha = input('please input the captcha:')\n\nformData['captcha-solution'] = captcha\nformData['captcha-id'] = captchaID\ns=requests.session()\nr = s.post(loginUrl, data=formData, headers=headers)\n\npage = r.text\nprint(r.url)\nprint(r.history)\n# print(r.cookies)\n# print(r.content.decode('utf-8'))\n# res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)\n#print(res.content.decode('utf-8'))\nif r.url == 'https://movie.douban.com/mine':\n    print('Login successfully!!!')\nprint\n'我看过的电影', '-' * 60\n# 获取看过的电影\nsoup = BeautifulSoup(page, \"html.parser\")\nresult = soup.findAll('li')\nfor item in result:\n    s=item.find('a', class_=\"cover\")\n    if s is not None:\n        # print(s)\n        print(s.get(\"href\"))\n        print(s.img[\"alt\"])\n        # for img in  s:\n        #     print(img[\"alt\"])\n        #     print(img.alt)\n\nelse:\n    print\n\"failed!\"\n```","slug":"Python爬虫","published":1,"updated":"2018-08-29T03:27:57.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlenmyfp0001z0okgawjas0b","content":"<h3 id=\"如何使用requests登录豆瓣并且爬取内容\"><a href=\"#如何使用requests登录豆瓣并且爬取内容\" class=\"headerlink\" title=\"如何使用requests登录豆瓣并且爬取内容\"></a>如何使用requests登录豆瓣并且爬取内容</h3><p>Note:<br>1.如果登录之后要去其他页面查看相关内容得记录session<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> s=requests.session()</span><br><span class=\"line\">r = s.post(loginUrl, data=formData, headers=headers</span><br><span class=\"line\">res=s.get(<span class=\"string\">\"http://movie.douban.com/mine\"</span>,cookies=r.cookies,headers=headers)</span><br></pre></td></tr></table></figure></p>\n<p>2.r.history可以记录login之后的302 status<br><a id=\"more\"></a><br>Code:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- encoding:utf-8 -*-  </span></span><br><span class=\"line\"><span class=\"comment\">##############################  </span></span><br><span class=\"line\">__author__ = <span class=\"string\">\"KevinZhou\"</span></span><br><span class=\"line\">__date__ = <span class=\"string\">\"2017/7/23\"</span></span><br><span class=\"line\"><span class=\"comment\">###############################  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">loginUrl = <span class=\"string\">'https://accounts.douban.com/login'</span></span><br><span class=\"line\">formData = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"redir\"</span>: <span class=\"string\">\"http://movie.douban.com/mine\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"form_email\"</span>: <span class=\"string\">\"******\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"form_password\"</span>: <span class=\"string\">\"******\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"login\"</span>: <span class=\"string\">u'登录'</span>,</span><br><span class=\"line\">    <span class=\"string\">\"source\"</span>:<span class=\"string\">\"index_nav\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">headers = &#123;<span class=\"string\">'user-agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.post(loginUrl, data=formData, headers=headers)</span><br><span class=\"line\">page = r.text</span><br><span class=\"line\"><span class=\"keyword\">print</span> (r.url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''''获取验证码图片'''</span></span><br><span class=\"line\"><span class=\"comment\"># 利用bs4获取captcha地址</span></span><br><span class=\"line\">soup = BeautifulSoup(page, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">captchaAddr = soup.find(<span class=\"string\">'img'</span>, id=<span class=\"string\">'captcha_image'</span>)[<span class=\"string\">'src'</span>]</span><br><span class=\"line\"><span class=\"comment\"># 利用正则表达式获取captcha的ID</span></span><br><span class=\"line\"><span class=\"comment\"># reCaptchaID = r'&lt;input type=\"hidden\" name=\"captcha-id\" value=\"(.*?)\"/'</span></span><br><span class=\"line\"><span class=\"comment\"># captchaID = re.findall(reCaptchaID, page)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># htm=requests.get(\"https://accounts.douban.com/login\")</span></span><br><span class=\"line\"><span class=\"comment\">#print(htm.content.decode('utf-8'))</span></span><br><span class=\"line\">a=soup.find(<span class=\"string\">\"img\"</span>,class_=<span class=\"string\">\"captcha_image\"</span>)</span><br><span class=\"line\">print(a.attrs[<span class=\"string\">'src'</span>])</span><br><span class=\"line\">pattern = re.compile(<span class=\"string\">r'id=(\\w*)(\\W)en&amp;size=(\\w*)$'</span>)</span><br><span class=\"line\">match=pattern.search(a.attrs[<span class=\"string\">'src'</span>])</span><br><span class=\"line\"><span class=\"keyword\">if</span> match:</span><br><span class=\"line\">    captchaID=match.group()[<span class=\"number\">3</span>:][:<span class=\"number\">-7</span>]</span><br><span class=\"line\">    print(captchaID)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print captchaID</span></span><br><span class=\"line\"><span class=\"comment\"># 保存到本地</span></span><br><span class=\"line\">urllib.request.urlretrieve(captchaAddr,<span class=\"string\">\"captcha.jpg\"</span>)</span><br><span class=\"line\">captcha = input(<span class=\"string\">'please input the captcha:'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">formData[<span class=\"string\">'captcha-solution'</span>] = captcha</span><br><span class=\"line\">formData[<span class=\"string\">'captcha-id'</span>] = captchaID</span><br><span class=\"line\">s=requests.session()</span><br><span class=\"line\">r = s.post(loginUrl, data=formData, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">page = r.text</span><br><span class=\"line\">print(r.url)</span><br><span class=\"line\">print(r.history)</span><br><span class=\"line\"><span class=\"comment\"># print(r.cookies)</span></span><br><span class=\"line\"><span class=\"comment\"># print(r.content.decode('utf-8'))</span></span><br><span class=\"line\"><span class=\"comment\"># res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)</span></span><br><span class=\"line\"><span class=\"comment\">#print(res.content.decode('utf-8'))</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> r.url == <span class=\"string\">'https://movie.douban.com/mine'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Login successfully!!!'</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span></span><br><span class=\"line\"><span class=\"string\">'我看过的电影'</span>, <span class=\"string\">'-'</span> * <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"comment\"># 获取看过的电影</span></span><br><span class=\"line\">soup = BeautifulSoup(page, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">result = soup.findAll(<span class=\"string\">'li'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">    s=item.find(<span class=\"string\">'a'</span>, class_=<span class=\"string\">\"cover\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        <span class=\"comment\"># print(s)</span></span><br><span class=\"line\">        print(s.get(<span class=\"string\">\"href\"</span>))</span><br><span class=\"line\">        print(s.img[<span class=\"string\">\"alt\"</span>])</span><br><span class=\"line\">        <span class=\"comment\"># for img in  s:</span></span><br><span class=\"line\">        <span class=\"comment\">#     print(img[\"alt\"])</span></span><br><span class=\"line\">        <span class=\"comment\">#     print(img.alt)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span></span><br><span class=\"line\"><span class=\"string\">\"failed!\"</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"如何使用requests登录豆瓣并且爬取内容\"><a href=\"#如何使用requests登录豆瓣并且爬取内容\" class=\"headerlink\" title=\"如何使用requests登录豆瓣并且爬取内容\"></a>如何使用requests登录豆瓣并且爬取内容</h3><p>Note:<br>1.如果登录之后要去其他页面查看相关内容得记录session<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> s=requests.session()</span><br><span class=\"line\">r = s.post(loginUrl, data=formData, headers=headers</span><br><span class=\"line\">res=s.get(<span class=\"string\">\"http://movie.douban.com/mine\"</span>,cookies=r.cookies,headers=headers)</span><br></pre></td></tr></table></figure></p>\n<p>2.r.history可以记录login之后的302 status<br>","more":"<br>Code:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- encoding:utf-8 -*-  </span></span><br><span class=\"line\"><span class=\"comment\">##############################  </span></span><br><span class=\"line\">__author__ = <span class=\"string\">\"KevinZhou\"</span></span><br><span class=\"line\">__date__ = <span class=\"string\">\"2017/7/23\"</span></span><br><span class=\"line\"><span class=\"comment\">###############################  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">loginUrl = <span class=\"string\">'https://accounts.douban.com/login'</span></span><br><span class=\"line\">formData = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"redir\"</span>: <span class=\"string\">\"http://movie.douban.com/mine\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"form_email\"</span>: <span class=\"string\">\"******\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"form_password\"</span>: <span class=\"string\">\"******\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"login\"</span>: <span class=\"string\">u'登录'</span>,</span><br><span class=\"line\">    <span class=\"string\">\"source\"</span>:<span class=\"string\">\"index_nav\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">headers = &#123;<span class=\"string\">'user-agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.post(loginUrl, data=formData, headers=headers)</span><br><span class=\"line\">page = r.text</span><br><span class=\"line\"><span class=\"keyword\">print</span> (r.url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''''获取验证码图片'''</span></span><br><span class=\"line\"><span class=\"comment\"># 利用bs4获取captcha地址</span></span><br><span class=\"line\">soup = BeautifulSoup(page, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">captchaAddr = soup.find(<span class=\"string\">'img'</span>, id=<span class=\"string\">'captcha_image'</span>)[<span class=\"string\">'src'</span>]</span><br><span class=\"line\"><span class=\"comment\"># 利用正则表达式获取captcha的ID</span></span><br><span class=\"line\"><span class=\"comment\"># reCaptchaID = r'&lt;input type=\"hidden\" name=\"captcha-id\" value=\"(.*?)\"/'</span></span><br><span class=\"line\"><span class=\"comment\"># captchaID = re.findall(reCaptchaID, page)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># htm=requests.get(\"https://accounts.douban.com/login\")</span></span><br><span class=\"line\"><span class=\"comment\">#print(htm.content.decode('utf-8'))</span></span><br><span class=\"line\">a=soup.find(<span class=\"string\">\"img\"</span>,class_=<span class=\"string\">\"captcha_image\"</span>)</span><br><span class=\"line\">print(a.attrs[<span class=\"string\">'src'</span>])</span><br><span class=\"line\">pattern = re.compile(<span class=\"string\">r'id=(\\w*)(\\W)en&amp;size=(\\w*)$'</span>)</span><br><span class=\"line\">match=pattern.search(a.attrs[<span class=\"string\">'src'</span>])</span><br><span class=\"line\"><span class=\"keyword\">if</span> match:</span><br><span class=\"line\">    captchaID=match.group()[<span class=\"number\">3</span>:][:<span class=\"number\">-7</span>]</span><br><span class=\"line\">    print(captchaID)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print captchaID</span></span><br><span class=\"line\"><span class=\"comment\"># 保存到本地</span></span><br><span class=\"line\">urllib.request.urlretrieve(captchaAddr,<span class=\"string\">\"captcha.jpg\"</span>)</span><br><span class=\"line\">captcha = input(<span class=\"string\">'please input the captcha:'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">formData[<span class=\"string\">'captcha-solution'</span>] = captcha</span><br><span class=\"line\">formData[<span class=\"string\">'captcha-id'</span>] = captchaID</span><br><span class=\"line\">s=requests.session()</span><br><span class=\"line\">r = s.post(loginUrl, data=formData, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">page = r.text</span><br><span class=\"line\">print(r.url)</span><br><span class=\"line\">print(r.history)</span><br><span class=\"line\"><span class=\"comment\"># print(r.cookies)</span></span><br><span class=\"line\"><span class=\"comment\"># print(r.content.decode('utf-8'))</span></span><br><span class=\"line\"><span class=\"comment\"># res=s.get(\"http://movie.douban.com/mine\",cookies=r.cookies,headers=headers)</span></span><br><span class=\"line\"><span class=\"comment\">#print(res.content.decode('utf-8'))</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> r.url == <span class=\"string\">'https://movie.douban.com/mine'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Login successfully!!!'</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span></span><br><span class=\"line\"><span class=\"string\">'我看过的电影'</span>, <span class=\"string\">'-'</span> * <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"comment\"># 获取看过的电影</span></span><br><span class=\"line\">soup = BeautifulSoup(page, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">result = soup.findAll(<span class=\"string\">'li'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">    s=item.find(<span class=\"string\">'a'</span>, class_=<span class=\"string\">\"cover\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        <span class=\"comment\"># print(s)</span></span><br><span class=\"line\">        print(s.get(<span class=\"string\">\"href\"</span>))</span><br><span class=\"line\">        print(s.img[<span class=\"string\">\"alt\"</span>])</span><br><span class=\"line\">        <span class=\"comment\"># for img in  s:</span></span><br><span class=\"line\">        <span class=\"comment\">#     print(img[\"alt\"])</span></span><br><span class=\"line\">        <span class=\"comment\">#     print(img.alt)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span></span><br><span class=\"line\"><span class=\"string\">\"failed!\"</span></span><br></pre></td></tr></table></figure></p>"},{"title":"RabbitMQ_No Exchange  (一)","author":"Kevin Zhou","date":"2018-08-28T08:58:00.000Z","_content":"### No Exchange test\n1.Install RabbitMQ :https://www.rabbitmq.com/download.html \n2.Create two .net core projects for testing: Send and Receive\n3.Send project Code:\n```Csharp\n   static void Main(string[] args)\n        {\n           NoExchangeTest(args,\"NoExchangeQueue\");           \n        }     \n         static void NoExchangeTest(string[] args,string queuename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queuename, durable: false, exclusive: false, autoDelete: false, arguments: null);\n\n                    string message = args.Length > 0 ? args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchange: \"\", routingKey: queuename, basicProperties: null, body: body); \n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n```\n<!--more-->\n\n  Receive project code:\n  ```Csharp\n  static void Main(string[] args)\n        {\n             ConsumeMsg(args, \"NoExchangeQueue\");\n           \n        }\n        \n          static void ConsumeMsg(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                       Console.WriteLine(\"queue:\"+queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        Thread.Sleep(6000);\n                        Console.WriteLine(\" [x] Done\");\n                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually send message acknowledgments\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n        }\n     ```\n4.Run Receive:\n  ```\n  dotnet run \n  ```\n  \n![upload successful](/images/pasted-1.png)\n5.Run Send:\n  ```\n  dotnet run \"aaa\"\n  ```\n  \n![](/images/pasted-0.png)\n\n6.Open RabitMQ admin :http://localhost:15672/ usrname :guest password:guest\n7.Click queue tab,you will find a new queue was created named \"NoExchangeQueue\"\n\n![upload successful](/images/NoExchangeQueue.png)","source":"_posts/RabbitMQ.md","raw":"title: RabbitMQ_No Exchange  (一)\nauthor: Kevin Zhou\ntags:\n  - RabbitMQ\ncategories: []\ndate: 2018-08-28 16:58:00\n---\n### No Exchange test\n1.Install RabbitMQ :https://www.rabbitmq.com/download.html \n2.Create two .net core projects for testing: Send and Receive\n3.Send project Code:\n```Csharp\n   static void Main(string[] args)\n        {\n           NoExchangeTest(args,\"NoExchangeQueue\");           \n        }     \n         static void NoExchangeTest(string[] args,string queuename)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queuename, durable: false, exclusive: false, autoDelete: false, arguments: null);\n\n                    string message = args.Length > 0 ? args[0] : \"Hello RabbitMQ\";\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(exchange: \"\", routingKey: queuename, basicProperties: null, body: body); \n                    Console.WriteLine(\"[x] Sent {0} \", message);\n\n                }\n            }\n        }\n```\n<!--more-->\n\n  Receive project code:\n  ```Csharp\n  static void Main(string[] args)\n        {\n             ConsumeMsg(args, \"NoExchangeQueue\");\n           \n        }\n        \n          static void ConsumeMsg(string[] args, string queueName)\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            {\n                using (var channel = connection.CreateModel())\n                {\n                    channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);\n                    var consumer = new EventingBasicConsumer(channel);\n                    consumer.Received += (model, ea) =>\n                    {\n                        var message = Encoding.UTF8.GetString(ea.Body);\n                       Console.WriteLine(\"queue:\"+queueName);\n                        Console.WriteLine(\"[x] Received {0}\", message);\n                        Thread.Sleep(6000);\n                        Console.WriteLine(\" [x] Done\");\n                        channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false); //Manually send message acknowledgments\n\n                    };\n                    channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);\n                    Console.WriteLine(\" Press [enter] to exit.\");\n                    Console.ReadLine();\n                }\n            }\n        }\n     ```\n4.Run Receive:\n  ```\n  dotnet run \n  ```\n  \n![upload successful](/images/pasted-1.png)\n5.Run Send:\n  ```\n  dotnet run \"aaa\"\n  ```\n  \n![](/images/pasted-0.png)\n\n6.Open RabitMQ admin :http://localhost:15672/ usrname :guest password:guest\n7.Click queue tab,you will find a new queue was created named \"NoExchangeQueue\"\n\n![upload successful](/images/NoExchangeQueue.png)","slug":"RabbitMQ","published":1,"updated":"2018-08-29T03:03:13.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlenmyfs0002z0ok36f9z0cl","content":"<h3 id=\"No-Exchange-test\"><a href=\"#No-Exchange-test\" class=\"headerlink\" title=\"No Exchange test\"></a>No Exchange test</h3><p>1.Install RabbitMQ :<a href=\"https://www.rabbitmq.com/download.html\" target=\"_blank\" rel=\"noopener\">https://www.rabbitmq.com/download.html</a><br>2.Create two .net core projects for testing: Send and Receive<br>3.Send project Code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">        NoExchangeTest(args,<span class=\"string\">\"NoExchangeQueue\"</span>);           </span><br><span class=\"line\">     &#125;     </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">NoExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args,<span class=\"keyword\">string</span> queuename</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">         <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 channel.QueueDeclare(queue: queuename, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                 channel.BasicPublish(exchange: <span class=\"string\">\"\"</span>, routingKey: queuename, basicProperties: <span class=\"literal\">null</span>, body: body); </span><br><span class=\"line\">                 Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>  Receive project code:<br>  <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">           ConsumeMsg(args, <span class=\"string\">\"NoExchangeQueue\"</span>);</span><br><span class=\"line\">         </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConsumeMsg</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> queueName</span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">          <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  channel.QueueDeclare(queue: queueName, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                  <span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">                  consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                     Console.WriteLine(<span class=\"string\">\"queue:\"</span>+queueName);</span><br><span class=\"line\">                      Console.WriteLine(<span class=\"string\">\"[x] Received &#123;0&#125;\"</span>, message);</span><br><span class=\"line\">                      Thread.Sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\">                      Console.WriteLine(<span class=\"string\">\" [x] Done\"</span>);</span><br><span class=\"line\">                      channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: <span class=\"literal\">false</span>); <span class=\"comment\">//Manually send message acknowledgments</span></span><br><span class=\"line\"></span><br><span class=\"line\">                  &#125;;</span><br><span class=\"line\">                  channel.BasicConsume(queue: queueName, autoAck: <span class=\"literal\">false</span>, consumer: consumer);</span><br><span class=\"line\">                  Console.WriteLine(<span class=\"string\">\" Press [enter] to exit.\"</span>);</span><br><span class=\"line\">                  Console.ReadLine();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.Run Receive:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"><br>5.Run Send:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run &quot;aaa&quot;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/pasted-0.png\" alt=\"\"></p>\n<p>6.Open RabitMQ admin :<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> usrname :guest password:guest<br>7.Click queue tab,you will find a new queue was created named “NoExchangeQueue”</p>\n<p><img src=\"/images/NoExchangeQueue.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"No-Exchange-test\"><a href=\"#No-Exchange-test\" class=\"headerlink\" title=\"No Exchange test\"></a>No Exchange test</h3><p>1.Install RabbitMQ :<a href=\"https://www.rabbitmq.com/download.html\" target=\"_blank\" rel=\"noopener\">https://www.rabbitmq.com/download.html</a><br>2.Create two .net core projects for testing: Send and Receive<br>3.Send project Code:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">        NoExchangeTest(args,<span class=\"string\">\"NoExchangeQueue\"</span>);           </span><br><span class=\"line\">     &#125;     </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">NoExchangeTest</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args,<span class=\"keyword\">string</span> queuename</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">         <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 channel.QueueDeclare(queue: queuename, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 <span class=\"keyword\">string</span> message = args.Length &gt; <span class=\"number\">0</span> ? args[<span class=\"number\">0</span>] : <span class=\"string\">\"Hello RabbitMQ\"</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">                 channel.BasicPublish(exchange: <span class=\"string\">\"\"</span>, routingKey: queuename, basicProperties: <span class=\"literal\">null</span>, body: body); </span><br><span class=\"line\">                 Console.WriteLine(<span class=\"string\">\"[x] Sent &#123;0&#125; \"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>  Receive project code:<br>  <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">           ConsumeMsg(args, <span class=\"string\">\"NoExchangeQueue\"</span>);</span><br><span class=\"line\">         </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConsumeMsg</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args, <span class=\"keyword\">string</span> queueName</span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConnectionFactory() &#123; HostName = <span class=\"string\">\"localhost\"</span> &#125;;</span><br><span class=\"line\">          <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = factory.CreateConnection())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = connection.CreateModel())</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  channel.QueueDeclare(queue: queueName, durable: <span class=\"literal\">false</span>, exclusive: <span class=\"literal\">false</span>, autoDelete: <span class=\"literal\">false</span>, arguments: <span class=\"literal\">null</span>);</span><br><span class=\"line\">                  <span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">                  consumer.Received += (model, ea) =&gt;</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(ea.Body);</span><br><span class=\"line\">                     Console.WriteLine(<span class=\"string\">\"queue:\"</span>+queueName);</span><br><span class=\"line\">                      Console.WriteLine(<span class=\"string\">\"[x] Received &#123;0&#125;\"</span>, message);</span><br><span class=\"line\">                      Thread.Sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\">                      Console.WriteLine(<span class=\"string\">\" [x] Done\"</span>);</span><br><span class=\"line\">                      channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: <span class=\"literal\">false</span>); <span class=\"comment\">//Manually send message acknowledgments</span></span><br><span class=\"line\"></span><br><span class=\"line\">                  &#125;;</span><br><span class=\"line\">                  channel.BasicConsume(queue: queueName, autoAck: <span class=\"literal\">false</span>, consumer: consumer);</span><br><span class=\"line\">                  Console.WriteLine(<span class=\"string\">\" Press [enter] to exit.\"</span>);</span><br><span class=\"line\">                  Console.ReadLine();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.Run Receive:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"><br>5.Run Send:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet run &quot;aaa&quot;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/pasted-0.png\" alt=\"\"></p>\n<p>6.Open RabitMQ admin :<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> usrname :guest password:guest<br>7.Click queue tab,you will find a new queue was created named “NoExchangeQueue”</p>\n<p><img src=\"/images/NoExchangeQueue.png\" alt=\"upload successful\"></p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-08-20T02:19:59.266Z","updated":"2018-08-20T02:19:59.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlenmyfy0004z0okudh1hjzn","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"RabbitMQ_No Exchange  (二)","author":"Kevin Zhou","_content":"","source":"_drafts/RabbitMQ-No-Exchange-二.md","raw":"---\ntitle: RabbitMQ_No Exchange  (二)\nauthor: Kevin Zhou\ntags:\n---\n","slug":"RabbitMQ-No-Exchange-二","published":0,"date":"2018-08-29T03:07:38.374Z","updated":"2018-08-29T03:07:38.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlenmyg40006z0oku5y4tn6n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"testImage","author":"Kevin Zhou","date":"2018-08-29T05:33:17.000Z","_content":"aaa\n\n![upload successful](testImage/image.png)\n\n![upload successful](image.png)","source":"_posts/Image.md","raw":"title: testImage\nauthor: Kevin Zhou\ndate: 2018-08-29 13:33:17\ntags:\n---\naaa\n\n![upload successful](testImage/image.png)\n\n![upload successful](image.png)","slug":"Image","published":1,"updated":"2018-08-29T05:41:50.229Z","_id":"cjlepfnbo0000acokces54fnf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>aaa</p>\n<p><img src=\"/2018/08/29/Image/image.png\" alt=\"upload successful\"></p>\n<p><img src=\"/2018/08/29/Image/image.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>aaa</p>\n<p><img src=\"/2018/08/29/Image/image.png\" alt=\"upload successful\"></p>\n<p><img src=\"/2018/08/29/Image/image.png\" alt=\"upload successful\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjlenmyfp0001z0okgawjas0b","tag_id":"cjlenmyfu0003z0oke2t696gt","_id":"cjlenmyg70008z0okbp6r3u5m"},{"post_id":"cjlenmyfs0002z0ok36f9z0cl","tag_id":"cjlenmyg60007z0oklucsivb3","_id":"cjlenmyga0009z0ok8b9o9jzh"}],"Tag":[{"name":"Python","_id":"cjlenmyfu0003z0oke2t696gt"},{"name":"RabbitMQ","_id":"cjlenmyg60007z0oklucsivb3"}]}}